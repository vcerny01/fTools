/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// LetterHeader
    /// </summary>
    [DataContract]
        public partial class LetterHeader :  IEquatable<LetterHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LetterHeader" /> class.
        /// </summary>
        /// <param name="transmissionDate">transmissionDate (required).</param>
        /// <param name="customerID">customerID.</param>
        /// <param name="postCode">postCode.</param>
        /// <param name="contractNumber">contractNumber.</param>
        /// <param name="frankingNumber">frankingNumber.</param>
        /// <param name="senderCustCardNum">senderCustCardNum.</param>
        /// <param name="locationNumber">locationNumber.</param>
        public LetterHeader(DateTime? transmissionDate = default(DateTime?), string customerID = default(string), string postCode = default(string), string contractNumber = default(string), string frankingNumber = default(string), string senderCustCardNum = default(string), int? locationNumber = default(int?))
        {
            // to ensure "transmissionDate" is required (not null)
            if (transmissionDate == null)
            {
                throw new InvalidDataException("transmissionDate is a required property for LetterHeader and cannot be null");
            }
            else
            {
                this.TransmissionDate = transmissionDate;
            }
            this.CustomerID = customerID;
            this.PostCode = postCode;
            this.ContractNumber = contractNumber;
            this.FrankingNumber = frankingNumber;
            this.SenderCustCardNum = senderCustCardNum;
            this.LocationNumber = locationNumber;
        }
        
        /// <summary>
        /// Gets or Sets TransmissionDate
        /// </summary>
        [DataMember(Name="transmissionDate", EmitDefaultValue=false)]
        public DateTime? TransmissionDate { get; set; }

        /// <summary>
        /// Gets or Sets CustomerID
        /// </summary>
        [DataMember(Name="customerID", EmitDefaultValue=false)]
        public string CustomerID { get; set; }

        /// <summary>
        /// Gets or Sets PostCode
        /// </summary>
        [DataMember(Name="postCode", EmitDefaultValue=false)]
        public string PostCode { get; set; }

        /// <summary>
        /// Gets or Sets ContractNumber
        /// </summary>
        [DataMember(Name="contractNumber", EmitDefaultValue=false)]
        public string ContractNumber { get; set; }

        /// <summary>
        /// Gets or Sets FrankingNumber
        /// </summary>
        [DataMember(Name="frankingNumber", EmitDefaultValue=false)]
        public string FrankingNumber { get; set; }

        /// <summary>
        /// Gets or Sets SenderCustCardNum
        /// </summary>
        [DataMember(Name="senderCustCardNum", EmitDefaultValue=false)]
        public string SenderCustCardNum { get; set; }

        /// <summary>
        /// Gets or Sets LocationNumber
        /// </summary>
        [DataMember(Name="locationNumber", EmitDefaultValue=false)]
        public int? LocationNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LetterHeader {\n");
            sb.Append("  TransmissionDate: ").Append(TransmissionDate).Append("\n");
            sb.Append("  CustomerID: ").Append(CustomerID).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  ContractNumber: ").Append(ContractNumber).Append("\n");
            sb.Append("  FrankingNumber: ").Append(FrankingNumber).Append("\n");
            sb.Append("  SenderCustCardNum: ").Append(SenderCustCardNum).Append("\n");
            sb.Append("  LocationNumber: ").Append(LocationNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LetterHeader);
        }

        /// <summary>
        /// Returns true if LetterHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of LetterHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LetterHeader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TransmissionDate == input.TransmissionDate ||
                    (this.TransmissionDate != null &&
                    this.TransmissionDate.Equals(input.TransmissionDate))
                ) && 
                (
                    this.CustomerID == input.CustomerID ||
                    (this.CustomerID != null &&
                    this.CustomerID.Equals(input.CustomerID))
                ) && 
                (
                    this.PostCode == input.PostCode ||
                    (this.PostCode != null &&
                    this.PostCode.Equals(input.PostCode))
                ) && 
                (
                    this.ContractNumber == input.ContractNumber ||
                    (this.ContractNumber != null &&
                    this.ContractNumber.Equals(input.ContractNumber))
                ) && 
                (
                    this.FrankingNumber == input.FrankingNumber ||
                    (this.FrankingNumber != null &&
                    this.FrankingNumber.Equals(input.FrankingNumber))
                ) && 
                (
                    this.SenderCustCardNum == input.SenderCustCardNum ||
                    (this.SenderCustCardNum != null &&
                    this.SenderCustCardNum.Equals(input.SenderCustCardNum))
                ) && 
                (
                    this.LocationNumber == input.LocationNumber ||
                    (this.LocationNumber != null &&
                    this.LocationNumber.Equals(input.LocationNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TransmissionDate != null)
                    hashCode = hashCode * 59 + this.TransmissionDate.GetHashCode();
                if (this.CustomerID != null)
                    hashCode = hashCode * 59 + this.CustomerID.GetHashCode();
                if (this.PostCode != null)
                    hashCode = hashCode * 59 + this.PostCode.GetHashCode();
                if (this.ContractNumber != null)
                    hashCode = hashCode * 59 + this.ContractNumber.GetHashCode();
                if (this.FrankingNumber != null)
                    hashCode = hashCode * 59 + this.FrankingNumber.GetHashCode();
                if (this.SenderCustCardNum != null)
                    hashCode = hashCode * 59 + this.SenderCustCardNum.GetHashCode();
                if (this.LocationNumber != null)
                    hashCode = hashCode * 59 + this.LocationNumber.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
