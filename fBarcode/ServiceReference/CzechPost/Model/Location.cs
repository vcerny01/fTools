/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// Location
    /// </summary>
    [DataContract]
        public partial class Location :  IEquatable<Location>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        /// <param name="locationName">locationName.</param>
        /// <param name="locationNameAddOn">locationNameAddOn.</param>
        /// <param name="senderAddress">senderAddress.</param>
        /// <param name="codAddress">codAddress.</param>
        /// <param name="codBank">codBank.</param>
        /// <param name="senderContacts">senderContacts.</param>
        public Location(string locationName = default(string), string locationNameAddOn = default(string), Address senderAddress = default(Address), Address codAddress = default(Address), Bank codBank = default(Bank), Contact senderContacts = default(Contact))
        {
            this.LocationName = locationName;
            this.LocationNameAddOn = locationNameAddOn;
            this.SenderAddress = senderAddress;
            this.CodAddress = codAddress;
            this.CodBank = codBank;
            this.SenderContacts = senderContacts;
        }
        
        /// <summary>
        /// Gets or Sets LocationName
        /// </summary>
        [DataMember(Name="locationName", EmitDefaultValue=false)]
        public string LocationName { get; set; }

        /// <summary>
        /// Gets or Sets LocationNameAddOn
        /// </summary>
        [DataMember(Name="locationNameAddOn", EmitDefaultValue=false)]
        public string LocationNameAddOn { get; set; }

        /// <summary>
        /// Gets or Sets SenderAddress
        /// </summary>
        [DataMember(Name="senderAddress", EmitDefaultValue=false)]
        public Address SenderAddress { get; set; }

        /// <summary>
        /// Gets or Sets CodAddress
        /// </summary>
        [DataMember(Name="codAddress", EmitDefaultValue=false)]
        public Address CodAddress { get; set; }

        /// <summary>
        /// Gets or Sets CodBank
        /// </summary>
        [DataMember(Name="codBank", EmitDefaultValue=false)]
        public Bank CodBank { get; set; }

        /// <summary>
        /// Gets or Sets SenderContacts
        /// </summary>
        [DataMember(Name="senderContacts", EmitDefaultValue=false)]
        public Contact SenderContacts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  LocationName: ").Append(LocationName).Append("\n");
            sb.Append("  LocationNameAddOn: ").Append(LocationNameAddOn).Append("\n");
            sb.Append("  SenderAddress: ").Append(SenderAddress).Append("\n");
            sb.Append("  CodAddress: ").Append(CodAddress).Append("\n");
            sb.Append("  CodBank: ").Append(CodBank).Append("\n");
            sb.Append("  SenderContacts: ").Append(SenderContacts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Location);
        }

        /// <summary>
        /// Returns true if Location instances are equal
        /// </summary>
        /// <param name="input">Instance of Location to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Location input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LocationName == input.LocationName ||
                    (this.LocationName != null &&
                    this.LocationName.Equals(input.LocationName))
                ) && 
                (
                    this.LocationNameAddOn == input.LocationNameAddOn ||
                    (this.LocationNameAddOn != null &&
                    this.LocationNameAddOn.Equals(input.LocationNameAddOn))
                ) && 
                (
                    this.SenderAddress == input.SenderAddress ||
                    (this.SenderAddress != null &&
                    this.SenderAddress.Equals(input.SenderAddress))
                ) && 
                (
                    this.CodAddress == input.CodAddress ||
                    (this.CodAddress != null &&
                    this.CodAddress.Equals(input.CodAddress))
                ) && 
                (
                    this.CodBank == input.CodBank ||
                    (this.CodBank != null &&
                    this.CodBank.Equals(input.CodBank))
                ) && 
                (
                    this.SenderContacts == input.SenderContacts ||
                    (this.SenderContacts != null &&
                    this.SenderContacts.Equals(input.SenderContacts))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocationName != null)
                    hashCode = hashCode * 59 + this.LocationName.GetHashCode();
                if (this.LocationNameAddOn != null)
                    hashCode = hashCode * 59 + this.LocationNameAddOn.GetHashCode();
                if (this.SenderAddress != null)
                    hashCode = hashCode * 59 + this.SenderAddress.GetHashCode();
                if (this.CodAddress != null)
                    hashCode = hashCode * 59 + this.CodAddress.GetHashCode();
                if (this.CodBank != null)
                    hashCode = hashCode * 59 + this.CodBank.GetHashCode();
                if (this.SenderContacts != null)
                    hashCode = hashCode * 59 + this.SenderContacts.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
