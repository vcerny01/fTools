/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// data of credited cash on delivery
    /// </summary>
    [DataContract]
        public partial class CreditedData :  IEquatable<CreditedData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreditedData" /> class.
        /// </summary>
        /// <param name="deliveryPostCode">The postal code of delivery office that paid the cash on delivery amount. /PSČ dodací pošty, která vyplatila dobírku..</param>
        /// <param name="deliveryPostOfficeName">Name of the delivery office. /Název dodací pošty..</param>
        /// <param name="paymentDate">Date of payment in the delivery post office. / Datum vyplacení dobírky na dodací poště..</param>
        /// <param name="serialNumber">Serial number of cash on delivery PK A. / podací číslo dobírkové PK A z APOSTU.</param>
        /// <param name="serialSubnumber">Subnumber of serial number. /Podčíslo podacího čísla..</param>
        /// <param name="transactionDate">Date of the transaction. /Datum převodu..</param>
        public CreditedData(string deliveryPostCode = default(string), string deliveryPostOfficeName = default(string), DateTime? paymentDate = default(DateTime?), string serialNumber = default(string), string serialSubnumber = default(string), string transactionDate = default(string))
        {
            this.DeliveryPostCode = deliveryPostCode;
            this.DeliveryPostOfficeName = deliveryPostOfficeName;
            this.PaymentDate = paymentDate;
            this.SerialNumber = serialNumber;
            this.SerialSubnumber = serialSubnumber;
            this.TransactionDate = transactionDate;
        }
        
        /// <summary>
        /// The postal code of delivery office that paid the cash on delivery amount. /PSČ dodací pošty, která vyplatila dobírku.
        /// </summary>
        /// <value>The postal code of delivery office that paid the cash on delivery amount. /PSČ dodací pošty, která vyplatila dobírku.</value>
        [DataMember(Name="deliveryPostCode", EmitDefaultValue=false)]
        public string DeliveryPostCode { get; set; }

        /// <summary>
        /// Name of the delivery office. /Název dodací pošty.
        /// </summary>
        /// <value>Name of the delivery office. /Název dodací pošty.</value>
        [DataMember(Name="deliveryPostOfficeName", EmitDefaultValue=false)]
        public string DeliveryPostOfficeName { get; set; }

        /// <summary>
        /// Date of payment in the delivery post office. / Datum vyplacení dobírky na dodací poště.
        /// </summary>
        /// <value>Date of payment in the delivery post office. / Datum vyplacení dobírky na dodací poště.</value>
        [DataMember(Name="paymentDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? PaymentDate { get; set; }

        /// <summary>
        /// Serial number of cash on delivery PK A. / podací číslo dobírkové PK A z APOSTU
        /// </summary>
        /// <value>Serial number of cash on delivery PK A. / podací číslo dobírkové PK A z APOSTU</value>
        [DataMember(Name="serialNumber", EmitDefaultValue=false)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Subnumber of serial number. /Podčíslo podacího čísla.
        /// </summary>
        /// <value>Subnumber of serial number. /Podčíslo podacího čísla.</value>
        [DataMember(Name="serialSubnumber", EmitDefaultValue=false)]
        public string SerialSubnumber { get; set; }

        /// <summary>
        /// Date of the transaction. /Datum převodu.
        /// </summary>
        /// <value>Date of the transaction. /Datum převodu.</value>
        [DataMember(Name="transactionDate", EmitDefaultValue=false)]
        public string TransactionDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreditedData {\n");
            sb.Append("  DeliveryPostCode: ").Append(DeliveryPostCode).Append("\n");
            sb.Append("  DeliveryPostOfficeName: ").Append(DeliveryPostOfficeName).Append("\n");
            sb.Append("  PaymentDate: ").Append(PaymentDate).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  SerialSubnumber: ").Append(SerialSubnumber).Append("\n");
            sb.Append("  TransactionDate: ").Append(TransactionDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreditedData);
        }

        /// <summary>
        /// Returns true if CreditedData instances are equal
        /// </summary>
        /// <param name="input">Instance of CreditedData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreditedData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DeliveryPostCode == input.DeliveryPostCode ||
                    (this.DeliveryPostCode != null &&
                    this.DeliveryPostCode.Equals(input.DeliveryPostCode))
                ) && 
                (
                    this.DeliveryPostOfficeName == input.DeliveryPostOfficeName ||
                    (this.DeliveryPostOfficeName != null &&
                    this.DeliveryPostOfficeName.Equals(input.DeliveryPostOfficeName))
                ) && 
                (
                    this.PaymentDate == input.PaymentDate ||
                    (this.PaymentDate != null &&
                    this.PaymentDate.Equals(input.PaymentDate))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.SerialSubnumber == input.SerialSubnumber ||
                    (this.SerialSubnumber != null &&
                    this.SerialSubnumber.Equals(input.SerialSubnumber))
                ) && 
                (
                    this.TransactionDate == input.TransactionDate ||
                    (this.TransactionDate != null &&
                    this.TransactionDate.Equals(input.TransactionDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DeliveryPostCode != null)
                    hashCode = hashCode * 59 + this.DeliveryPostCode.GetHashCode();
                if (this.DeliveryPostOfficeName != null)
                    hashCode = hashCode * 59 + this.DeliveryPostOfficeName.GetHashCode();
                if (this.PaymentDate != null)
                    hashCode = hashCode * 59 + this.PaymentDate.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.SerialSubnumber != null)
                    hashCode = hashCode * 59 + this.SerialSubnumber.GetHashCode();
                if (this.TransactionDate != null)
                    hashCode = hashCode * 59 + this.TransactionDate.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
