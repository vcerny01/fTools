/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// Extended ParcelStatus, reason included. / Rozšířený ParcelStatus o reason.
    /// </summary>
    [DataContract]
        public partial class ParcelStatusExt :  IEquatable<ParcelStatusExt>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelStatusExt" /> class.
        /// </summary>
        /// <param name="statusID">Status ID. / ID stavu..</param>
        /// <param name="reasonID">Reason ID.  / ID důvodu ke stavu..</param>
        /// <param name="date">date.</param>
        /// <param name="statusDescription">Text value of combination of statusID + reasonID. / Textová hodnota kombinace statusID + reasonID..</param>
        /// <param name="postOffice">Postcode of the post office of the status origin. / PSČ místa vzniku stavu..</param>
        /// <param name="postOfficeName">Name of the post office. / Název provozovny..</param>
        public ParcelStatusExt(string statusID = default(string), string reasonID = default(string), DateTime? date = default(DateTime?), string statusDescription = default(string), string postOffice = default(string), string postOfficeName = default(string))
        {
            this.StatusID = statusID;
            this.ReasonID = reasonID;
            this.Date = date;
            this.StatusDescription = statusDescription;
            this.PostOffice = postOffice;
            this.PostOfficeName = postOfficeName;
        }
        
        /// <summary>
        /// Status ID. / ID stavu.
        /// </summary>
        /// <value>Status ID. / ID stavu.</value>
        [DataMember(Name="statusID", EmitDefaultValue=false)]
        public string StatusID { get; set; }

        /// <summary>
        /// Reason ID.  / ID důvodu ke stavu.
        /// </summary>
        /// <value>Reason ID.  / ID důvodu ke stavu.</value>
        [DataMember(Name="reasonID", EmitDefaultValue=false)]
        public string ReasonID { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Text value of combination of statusID + reasonID. / Textová hodnota kombinace statusID + reasonID.
        /// </summary>
        /// <value>Text value of combination of statusID + reasonID. / Textová hodnota kombinace statusID + reasonID.</value>
        [DataMember(Name="statusDescription", EmitDefaultValue=false)]
        public string StatusDescription { get; set; }

        /// <summary>
        /// Postcode of the post office of the status origin. / PSČ místa vzniku stavu.
        /// </summary>
        /// <value>Postcode of the post office of the status origin. / PSČ místa vzniku stavu.</value>
        [DataMember(Name="postOffice", EmitDefaultValue=false)]
        public string PostOffice { get; set; }

        /// <summary>
        /// Name of the post office. / Název provozovny.
        /// </summary>
        /// <value>Name of the post office. / Název provozovny.</value>
        [DataMember(Name="postOfficeName", EmitDefaultValue=false)]
        public string PostOfficeName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParcelStatusExt {\n");
            sb.Append("  StatusID: ").Append(StatusID).Append("\n");
            sb.Append("  ReasonID: ").Append(ReasonID).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  StatusDescription: ").Append(StatusDescription).Append("\n");
            sb.Append("  PostOffice: ").Append(PostOffice).Append("\n");
            sb.Append("  PostOfficeName: ").Append(PostOfficeName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelStatusExt);
        }

        /// <summary>
        /// Returns true if ParcelStatusExt instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelStatusExt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelStatusExt input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.StatusID == input.StatusID ||
                    (this.StatusID != null &&
                    this.StatusID.Equals(input.StatusID))
                ) && 
                (
                    this.ReasonID == input.ReasonID ||
                    (this.ReasonID != null &&
                    this.ReasonID.Equals(input.ReasonID))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.StatusDescription == input.StatusDescription ||
                    (this.StatusDescription != null &&
                    this.StatusDescription.Equals(input.StatusDescription))
                ) && 
                (
                    this.PostOffice == input.PostOffice ||
                    (this.PostOffice != null &&
                    this.PostOffice.Equals(input.PostOffice))
                ) && 
                (
                    this.PostOfficeName == input.PostOfficeName ||
                    (this.PostOfficeName != null &&
                    this.PostOfficeName.Equals(input.PostOfficeName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StatusID != null)
                    hashCode = hashCode * 59 + this.StatusID.GetHashCode();
                if (this.ReasonID != null)
                    hashCode = hashCode * 59 + this.ReasonID.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.StatusDescription != null)
                    hashCode = hashCode * 59 + this.StatusDescription.GetHashCode();
                if (this.PostOffice != null)
                    hashCode = hashCode * 59 + this.PostOffice.GetHashCode();
                if (this.PostOfficeName != null)
                    hashCode = hashCode * 59 + this.PostOfficeName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
