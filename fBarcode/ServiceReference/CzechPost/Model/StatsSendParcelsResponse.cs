/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// StatsSendParcelsResponse
    /// </summary>
    [DataContract]
        public partial class StatsSendParcelsResponse :  IEquatable<StatsSendParcelsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="StatsSendParcelsResponse" /> class.
        /// </summary>
        /// <param name="importAll">Sum of all imports. /Celkovy počet importů. (required).</param>
        /// <param name="importErr">Number of failed imports. /Počet chybných importů. (required).</param>
        /// <param name="importOK">Number of accepted imports. /Počet přijatých importů. (required).</param>
        /// <param name="parcels">Number of accepted parcels. /Počet přijatých zásilek. (required).</param>
        public StatsSendParcelsResponse(int? importAll = default(int?), int? importErr = default(int?), int? importOK = default(int?), int? parcels = default(int?))
        {
            // to ensure "importAll" is required (not null)
            if (importAll == null)
            {
                throw new InvalidDataException("importAll is a required property for StatsSendParcelsResponse and cannot be null");
            }
            else
            {
                this.ImportAll = importAll;
            }
            // to ensure "importErr" is required (not null)
            if (importErr == null)
            {
                throw new InvalidDataException("importErr is a required property for StatsSendParcelsResponse and cannot be null");
            }
            else
            {
                this.ImportErr = importErr;
            }
            // to ensure "importOK" is required (not null)
            if (importOK == null)
            {
                throw new InvalidDataException("importOK is a required property for StatsSendParcelsResponse and cannot be null");
            }
            else
            {
                this.ImportOK = importOK;
            }
            // to ensure "parcels" is required (not null)
            if (parcels == null)
            {
                throw new InvalidDataException("parcels is a required property for StatsSendParcelsResponse and cannot be null");
            }
            else
            {
                this.Parcels = parcels;
            }
        }
        
        /// <summary>
        /// Sum of all imports. /Celkovy počet importů.
        /// </summary>
        /// <value>Sum of all imports. /Celkovy počet importů.</value>
        [DataMember(Name="importAll", EmitDefaultValue=false)]
        public int? ImportAll { get; set; }

        /// <summary>
        /// Number of failed imports. /Počet chybných importů.
        /// </summary>
        /// <value>Number of failed imports. /Počet chybných importů.</value>
        [DataMember(Name="importErr", EmitDefaultValue=false)]
        public int? ImportErr { get; set; }

        /// <summary>
        /// Number of accepted imports. /Počet přijatých importů.
        /// </summary>
        /// <value>Number of accepted imports. /Počet přijatých importů.</value>
        [DataMember(Name="importOK", EmitDefaultValue=false)]
        public int? ImportOK { get; set; }

        /// <summary>
        /// Number of accepted parcels. /Počet přijatých zásilek.
        /// </summary>
        /// <value>Number of accepted parcels. /Počet přijatých zásilek.</value>
        [DataMember(Name="parcels", EmitDefaultValue=false)]
        public int? Parcels { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StatsSendParcelsResponse {\n");
            sb.Append("  ImportAll: ").Append(ImportAll).Append("\n");
            sb.Append("  ImportErr: ").Append(ImportErr).Append("\n");
            sb.Append("  ImportOK: ").Append(ImportOK).Append("\n");
            sb.Append("  Parcels: ").Append(Parcels).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as StatsSendParcelsResponse);
        }

        /// <summary>
        /// Returns true if StatsSendParcelsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of StatsSendParcelsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StatsSendParcelsResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ImportAll == input.ImportAll ||
                    (this.ImportAll != null &&
                    this.ImportAll.Equals(input.ImportAll))
                ) && 
                (
                    this.ImportErr == input.ImportErr ||
                    (this.ImportErr != null &&
                    this.ImportErr.Equals(input.ImportErr))
                ) && 
                (
                    this.ImportOK == input.ImportOK ||
                    (this.ImportOK != null &&
                    this.ImportOK.Equals(input.ImportOK))
                ) && 
                (
                    this.Parcels == input.Parcels ||
                    (this.Parcels != null &&
                    this.Parcels.Equals(input.Parcels))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ImportAll != null)
                    hashCode = hashCode * 59 + this.ImportAll.GetHashCode();
                if (this.ImportErr != null)
                    hashCode = hashCode * 59 + this.ImportErr.GetHashCode();
                if (this.ImportOK != null)
                    hashCode = hashCode * 59 + this.ImportOK.GetHashCode();
                if (this.Parcels != null)
                    hashCode = hashCode * 59 + this.Parcels.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
