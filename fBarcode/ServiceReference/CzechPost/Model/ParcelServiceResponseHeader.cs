/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// ParcelServiceResponseHeader
    /// </summary>
    [DataContract]
        public partial class ParcelServiceResponseHeader :  IEquatable<ParcelServiceResponseHeader>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelServiceResponseHeader" /> class.
        /// </summary>
        /// <param name="resultHeader">resultHeader.</param>
        /// <param name="resultParcelData">resultParcelData.</param>
        /// <param name="resultParcelCustomsGoods">resultParcelCustomsGoods.</param>
        /// <param name="resultParcelCustomsDocument">resultParcelCustomsDocument.</param>
        /// <param name="responsePrintParams">responsePrintParams.</param>
        public ParcelServiceResponseHeader(StatusResponseItem resultHeader = default(StatusResponseItem), ResultSendParcelsListItem resultParcelData = default(ResultSendParcelsListItem), List<ResultParcelCustomsGoodsItem> resultParcelCustomsGoods = default(List<ResultParcelCustomsGoodsItem>), List<ResultParcelCustomsDocumentList> resultParcelCustomsDocument = default(List<ResultParcelCustomsDocumentList>), ResponsePrintParams responsePrintParams = default(ResponsePrintParams))
        {
            this.ResultHeader = resultHeader;
            this.ResultParcelData = resultParcelData;
            this.ResultParcelCustomsGoods = resultParcelCustomsGoods;
            this.ResultParcelCustomsDocument = resultParcelCustomsDocument;
            this.ResponsePrintParams = responsePrintParams;
        }
        
        /// <summary>
        /// Gets or Sets ResultHeader
        /// </summary>
        [DataMember(Name="resultHeader", EmitDefaultValue=false)]
        public StatusResponseItem ResultHeader { get; set; }

        /// <summary>
        /// Gets or Sets ResultParcelData
        /// </summary>
        [DataMember(Name="resultParcelData", EmitDefaultValue=false)]
        public ResultSendParcelsListItem ResultParcelData { get; set; }

        /// <summary>
        /// Gets or Sets ResultParcelCustomsGoods
        /// </summary>
        [DataMember(Name="resultParcelCustomsGoods", EmitDefaultValue=false)]
        public List<ResultParcelCustomsGoodsItem> ResultParcelCustomsGoods { get; set; }

        /// <summary>
        /// Gets or Sets ResultParcelCustomsDocument
        /// </summary>
        [DataMember(Name="resultParcelCustomsDocument", EmitDefaultValue=false)]
        public List<ResultParcelCustomsDocumentList> ResultParcelCustomsDocument { get; set; }

        /// <summary>
        /// Gets or Sets ResponsePrintParams
        /// </summary>
        [DataMember(Name="responsePrintParams", EmitDefaultValue=false)]
        public ResponsePrintParams ResponsePrintParams { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParcelServiceResponseHeader {\n");
            sb.Append("  ResultHeader: ").Append(ResultHeader).Append("\n");
            sb.Append("  ResultParcelData: ").Append(ResultParcelData).Append("\n");
            sb.Append("  ResultParcelCustomsGoods: ").Append(ResultParcelCustomsGoods).Append("\n");
            sb.Append("  ResultParcelCustomsDocument: ").Append(ResultParcelCustomsDocument).Append("\n");
            sb.Append("  ResponsePrintParams: ").Append(ResponsePrintParams).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelServiceResponseHeader);
        }

        /// <summary>
        /// Returns true if ParcelServiceResponseHeader instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelServiceResponseHeader to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelServiceResponseHeader input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResultHeader == input.ResultHeader ||
                    (this.ResultHeader != null &&
                    this.ResultHeader.Equals(input.ResultHeader))
                ) && 
                (
                    this.ResultParcelData == input.ResultParcelData ||
                    (this.ResultParcelData != null &&
                    this.ResultParcelData.Equals(input.ResultParcelData))
                ) && 
                (
                    this.ResultParcelCustomsGoods == input.ResultParcelCustomsGoods ||
                    this.ResultParcelCustomsGoods != null &&
                    input.ResultParcelCustomsGoods != null &&
                    this.ResultParcelCustomsGoods.SequenceEqual(input.ResultParcelCustomsGoods)
                ) && 
                (
                    this.ResultParcelCustomsDocument == input.ResultParcelCustomsDocument ||
                    this.ResultParcelCustomsDocument != null &&
                    input.ResultParcelCustomsDocument != null &&
                    this.ResultParcelCustomsDocument.SequenceEqual(input.ResultParcelCustomsDocument)
                ) && 
                (
                    this.ResponsePrintParams == input.ResponsePrintParams ||
                    (this.ResponsePrintParams != null &&
                    this.ResponsePrintParams.Equals(input.ResponsePrintParams))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResultHeader != null)
                    hashCode = hashCode * 59 + this.ResultHeader.GetHashCode();
                if (this.ResultParcelData != null)
                    hashCode = hashCode * 59 + this.ResultParcelData.GetHashCode();
                if (this.ResultParcelCustomsGoods != null)
                    hashCode = hashCode * 59 + this.ResultParcelCustomsGoods.GetHashCode();
                if (this.ResultParcelCustomsDocument != null)
                    hashCode = hashCode * 59 + this.ResultParcelCustomsDocument.GetHashCode();
                if (this.ResponsePrintParams != null)
                    hashCode = hashCode * 59 + this.ResponsePrintParams.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
