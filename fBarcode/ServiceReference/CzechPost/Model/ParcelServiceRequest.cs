/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// ParcelServiceRequest
    /// </summary>
    [DataContract]
        public partial class ParcelServiceRequest :  IEquatable<ParcelServiceRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelServiceRequest" /> class.
        /// </summary>
        /// <param name="parcelServiceHeader">parcelServiceHeader (required).</param>
        /// <param name="parcelServiceData">parcelServiceData.</param>
        /// <param name="multipartParcelData">multipartParcelData.</param>
        /// <param name="parcelCustomsDocuments">parcelCustomsDocuments.</param>
        public ParcelServiceRequest(ParcelServiceHeader parcelServiceHeader = default(ParcelServiceHeader), ParcelData parcelServiceData = default(ParcelData), AdditionalParcelData multipartParcelData = default(AdditionalParcelData), List<ParcelCustomsDocuments> parcelCustomsDocuments = default(List<ParcelCustomsDocuments>))
        {
            // to ensure "parcelServiceHeader" is required (not null)
            if (parcelServiceHeader == null)
            {
                throw new InvalidDataException("parcelServiceHeader is a required property for ParcelServiceRequest and cannot be null");
            }
            else
            {
                this.ParcelServiceHeader = parcelServiceHeader;
            }
            this.ParcelServiceData = parcelServiceData;
            this.MultipartParcelData = multipartParcelData;
            this.ParcelCustomsDocuments = parcelCustomsDocuments;
        }
        
        /// <summary>
        /// Gets or Sets ParcelServiceHeader
        /// </summary>
        [DataMember(Name="parcelServiceHeader", EmitDefaultValue=false)]
        public ParcelServiceHeader ParcelServiceHeader { get; set; }

        /// <summary>
        /// Gets or Sets ParcelServiceData
        /// </summary>
        [DataMember(Name="parcelServiceData", EmitDefaultValue=false)]
        public ParcelData ParcelServiceData { get; set; }

        /// <summary>
        /// Gets or Sets MultipartParcelData
        /// </summary>
        [DataMember(Name="multipartParcelData", EmitDefaultValue=false)]
        public AdditionalParcelData MultipartParcelData { get; set; }

        /// <summary>
        /// Gets or Sets ParcelCustomsDocuments
        /// </summary>
        [DataMember(Name="parcelCustomsDocuments", EmitDefaultValue=false)]
        public List<ParcelCustomsDocuments> ParcelCustomsDocuments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParcelServiceRequest {\n");
            sb.Append("  ParcelServiceHeader: ").Append(ParcelServiceHeader).Append("\n");
            sb.Append("  ParcelServiceData: ").Append(ParcelServiceData).Append("\n");
            sb.Append("  MultipartParcelData: ").Append(MultipartParcelData).Append("\n");
            sb.Append("  ParcelCustomsDocuments: ").Append(ParcelCustomsDocuments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelServiceRequest);
        }

        /// <summary>
        /// Returns true if ParcelServiceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelServiceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelServiceRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParcelServiceHeader == input.ParcelServiceHeader ||
                    (this.ParcelServiceHeader != null &&
                    this.ParcelServiceHeader.Equals(input.ParcelServiceHeader))
                ) && 
                (
                    this.ParcelServiceData == input.ParcelServiceData ||
                    (this.ParcelServiceData != null &&
                    this.ParcelServiceData.Equals(input.ParcelServiceData))
                ) && 
                (
                    this.MultipartParcelData == input.MultipartParcelData ||
                    (this.MultipartParcelData != null &&
                    this.MultipartParcelData.Equals(input.MultipartParcelData))
                ) && 
                (
                    this.ParcelCustomsDocuments == input.ParcelCustomsDocuments ||
                    this.ParcelCustomsDocuments != null &&
                    input.ParcelCustomsDocuments != null &&
                    this.ParcelCustomsDocuments.SequenceEqual(input.ParcelCustomsDocuments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParcelServiceHeader != null)
                    hashCode = hashCode * 59 + this.ParcelServiceHeader.GetHashCode();
                if (this.ParcelServiceData != null)
                    hashCode = hashCode * 59 + this.ParcelServiceData.GetHashCode();
                if (this.MultipartParcelData != null)
                    hashCode = hashCode * 59 + this.MultipartParcelData.GetHashCode();
                if (this.ParcelCustomsDocuments != null)
                    hashCode = hashCode * 59 + this.ParcelCustomsDocuments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
