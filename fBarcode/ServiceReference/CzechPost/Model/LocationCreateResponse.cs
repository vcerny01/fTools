/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// LocationCreateResponse
    /// </summary>
    [DataContract]
        public partial class LocationCreateResponse :  IEquatable<LocationCreateResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationCreateResponse" /> class.
        /// </summary>
        /// <param name="locationStateSenderResponse">locationStateSenderResponse.</param>
        /// <param name="locationStateCodResponse">locationStateCodResponse.</param>
        /// <param name="locationData">locationData.</param>
        public LocationCreateResponse(List<StatusResponseItem> locationStateSenderResponse = default(List<StatusResponseItem>), List<StatusResponseItem> locationStateCodResponse = default(List<StatusResponseItem>), LocationData locationData = default(LocationData))
        {
            this.LocationStateSenderResponse = locationStateSenderResponse;
            this.LocationStateCodResponse = locationStateCodResponse;
            this.LocationData = locationData;
        }
        
        /// <summary>
        /// Gets or Sets LocationStateSenderResponse
        /// </summary>
        [DataMember(Name="locationStateSenderResponse", EmitDefaultValue=false)]
        public List<StatusResponseItem> LocationStateSenderResponse { get; set; }

        /// <summary>
        /// Gets or Sets LocationStateCodResponse
        /// </summary>
        [DataMember(Name="locationStateCodResponse", EmitDefaultValue=false)]
        public List<StatusResponseItem> LocationStateCodResponse { get; set; }

        /// <summary>
        /// Gets or Sets LocationData
        /// </summary>
        [DataMember(Name="locationData", EmitDefaultValue=false)]
        public LocationData LocationData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LocationCreateResponse {\n");
            sb.Append("  LocationStateSenderResponse: ").Append(LocationStateSenderResponse).Append("\n");
            sb.Append("  LocationStateCodResponse: ").Append(LocationStateCodResponse).Append("\n");
            sb.Append("  LocationData: ").Append(LocationData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LocationCreateResponse);
        }

        /// <summary>
        /// Returns true if LocationCreateResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of LocationCreateResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LocationCreateResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LocationStateSenderResponse == input.LocationStateSenderResponse ||
                    this.LocationStateSenderResponse != null &&
                    input.LocationStateSenderResponse != null &&
                    this.LocationStateSenderResponse.SequenceEqual(input.LocationStateSenderResponse)
                ) && 
                (
                    this.LocationStateCodResponse == input.LocationStateCodResponse ||
                    this.LocationStateCodResponse != null &&
                    input.LocationStateCodResponse != null &&
                    this.LocationStateCodResponse.SequenceEqual(input.LocationStateCodResponse)
                ) && 
                (
                    this.LocationData == input.LocationData ||
                    (this.LocationData != null &&
                    this.LocationData.Equals(input.LocationData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LocationStateSenderResponse != null)
                    hashCode = hashCode * 59 + this.LocationStateSenderResponse.GetHashCode();
                if (this.LocationStateCodResponse != null)
                    hashCode = hashCode * 59 + this.LocationStateCodResponse.GetHashCode();
                if (this.LocationData != null)
                    hashCode = hashCode * 59 + this.LocationData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
