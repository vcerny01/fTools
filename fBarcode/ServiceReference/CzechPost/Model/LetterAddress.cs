/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// LetterAddress
    /// </summary>
    [DataContract]
        public partial class LetterAddress :  IEquatable<LetterAddress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LetterAddress" /> class.
        /// </summary>
        /// <param name="title">title.</param>
        /// <param name="address">address.</param>
        /// <param name="bank">bank.</param>
        /// <param name="contact">contact.</param>
        /// <param name="custCardNum">custCardNum.</param>
        /// <param name="adviceInfo">adviceInfo.</param>
        public LetterAddress(Title title = default(Title), AddressCOMMON address = default(AddressCOMMON), Bank bank = default(Bank), Contact contact = default(Contact), string custCardNum = default(string), AdviceInfo adviceInfo = default(AdviceInfo))
        {
            this.Title = title;
            this.Address = address;
            this.Bank = bank;
            this.Contact = contact;
            this.CustCardNum = custCardNum;
            this.AdviceInfo = adviceInfo;
        }
        
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public Title Title { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public AddressCOMMON Address { get; set; }

        /// <summary>
        /// Gets or Sets Bank
        /// </summary>
        [DataMember(Name="bank", EmitDefaultValue=false)]
        public Bank Bank { get; set; }

        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="contact", EmitDefaultValue=false)]
        public Contact Contact { get; set; }

        /// <summary>
        /// Gets or Sets CustCardNum
        /// </summary>
        [DataMember(Name="custCardNum", EmitDefaultValue=false)]
        public string CustCardNum { get; set; }

        /// <summary>
        /// Gets or Sets AdviceInfo
        /// </summary>
        [DataMember(Name="adviceInfo", EmitDefaultValue=false)]
        public AdviceInfo AdviceInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LetterAddress {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Bank: ").Append(Bank).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("  CustCardNum: ").Append(CustCardNum).Append("\n");
            sb.Append("  AdviceInfo: ").Append(AdviceInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LetterAddress);
        }

        /// <summary>
        /// Returns true if LetterAddress instances are equal
        /// </summary>
        /// <param name="input">Instance of LetterAddress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LetterAddress input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Bank == input.Bank ||
                    (this.Bank != null &&
                    this.Bank.Equals(input.Bank))
                ) && 
                (
                    this.Contact == input.Contact ||
                    (this.Contact != null &&
                    this.Contact.Equals(input.Contact))
                ) && 
                (
                    this.CustCardNum == input.CustCardNum ||
                    (this.CustCardNum != null &&
                    this.CustCardNum.Equals(input.CustCardNum))
                ) && 
                (
                    this.AdviceInfo == input.AdviceInfo ||
                    (this.AdviceInfo != null &&
                    this.AdviceInfo.Equals(input.AdviceInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Bank != null)
                    hashCode = hashCode * 59 + this.Bank.GetHashCode();
                if (this.Contact != null)
                    hashCode = hashCode * 59 + this.Contact.GetHashCode();
                if (this.CustCardNum != null)
                    hashCode = hashCode * 59 + this.CustCardNum.GetHashCode();
                if (this.AdviceInfo != null)
                    hashCode = hashCode * 59 + this.AdviceInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
