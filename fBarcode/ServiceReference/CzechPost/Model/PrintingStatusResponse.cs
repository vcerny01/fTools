/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// * 1 - OK - The processing parameter datas are OK. / OK - Data parametru zpracování v pořádku. * 2 - INTERNAL_ERROR - Another system error. / INTERNAL_ERROR - Jiná chyba systému. * 100 - INVALID_PARCEL_CODE - The parcel code is invalid. / INVALID_PARCEL_CODE - Neplatné ID zásilky. * 378 - INVALID_PREFIX_COMBINATION - The parcel is incorrectly assigned to the print template ID. / INVALID_PREFIX_COMBINATION - Zásilka je chybně přiřazená k id tiskové šablony. * 379 - PARCEL_DOES_NOT_MEET_THE_REQUIREMENTS_FORM - The parcel parameters doesn&#x27;t agree with the conditions of the form./ PARCEL_DOES_NOT_MEET_THE_REQUIREMENTS_FORM - Parametry zásilky nesplňují podmínky požadovaného formuláře. * 380 - NO_CONTRACT_SERVICE_RETURN_RECEIPT - For this form does not exists valid contract for the Advice service./ NO_CONTRACT_SERVICE_RETURN_RECEIPT - K formuláři není sjednaná smlouva ke službě Dodejka. 
    /// </summary>
    [DataContract]
        public partial class PrintingStatusResponse :  IEquatable<PrintingStatusResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintingStatusResponse" /> class.
        /// </summary>
        /// <param name="responseCode">responseCode (required).</param>
        /// <param name="responseText">responseText (required).</param>
        public PrintingStatusResponse(int? responseCode = default(int?), string responseText = default(string))
        {
            // to ensure "responseCode" is required (not null)
            if (responseCode == null)
            {
                throw new InvalidDataException("responseCode is a required property for PrintingStatusResponse and cannot be null");
            }
            else
            {
                this.ResponseCode = responseCode;
            }
            // to ensure "responseText" is required (not null)
            if (responseText == null)
            {
                throw new InvalidDataException("responseText is a required property for PrintingStatusResponse and cannot be null");
            }
            else
            {
                this.ResponseText = responseText;
            }
        }
        
        /// <summary>
        /// Gets or Sets ResponseCode
        /// </summary>
        [DataMember(Name="responseCode", EmitDefaultValue=false)]
        public int? ResponseCode { get; set; }

        /// <summary>
        /// Gets or Sets ResponseText
        /// </summary>
        [DataMember(Name="responseText", EmitDefaultValue=false)]
        public string ResponseText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrintingStatusResponse {\n");
            sb.Append("  ResponseCode: ").Append(ResponseCode).Append("\n");
            sb.Append("  ResponseText: ").Append(ResponseText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrintingStatusResponse);
        }

        /// <summary>
        /// Returns true if PrintingStatusResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of PrintingStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrintingStatusResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponseCode == input.ResponseCode ||
                    (this.ResponseCode != null &&
                    this.ResponseCode.Equals(input.ResponseCode))
                ) && 
                (
                    this.ResponseText == input.ResponseText ||
                    (this.ResponseText != null &&
                    this.ResponseText.Equals(input.ResponseText))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseCode != null)
                    hashCode = hashCode * 59 + this.ResponseCode.GetHashCode();
                if (this.ResponseText != null)
                    hashCode = hashCode * 59 + this.ResponseText.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
