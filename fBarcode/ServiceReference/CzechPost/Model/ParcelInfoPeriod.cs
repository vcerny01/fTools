/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// ParcelInfoPeriod
    /// </summary>
    [DataContract]
        public partial class ParcelInfoPeriod :  IEquatable<ParcelInfoPeriod>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelInfoPeriod" /> class.
        /// </summary>
        /// <param name="parcelCode">parcelCode.</param>
        /// <param name="statusID">Status ID. / ID stavu..</param>
        /// <param name="reasonID">Reason ID.  / ID důvodu ke stavu..</param>
        /// <param name="timeStamp">Date and time of consignment status origin. / Datum a čas vzniku stavu zásilky..</param>
        /// <param name="postOffice">Postcode of the post office of the status origin. / PSČ místa vzniku stavu..</param>
        /// <param name="payoutAmount">payoutAmount.</param>
        /// <param name="weight">weight.</param>
        /// <param name="amount">amount.</param>
        /// <param name="insuredValue">insuredValue.</param>
        /// <param name="services">services.</param>
        /// <param name="discount">Collection tariff. / Tarif za svoz..</param>
        /// <param name="variableSymbol">Variable symbol. / Variabilní symbol..</param>
        /// <param name="custNum">Number of customer by Sender. / Číslo zákazníka u podavatele..</param>
        /// <param name="zipCodeAddr">Postal code of Addressee. / PSČ adresáta..</param>
        public ParcelInfoPeriod(string parcelCode = default(string), string statusID = default(string), string reasonID = default(string), DateTime? timeStamp = default(DateTime?), string postOffice = default(string), double? payoutAmount = default(double?), string weight = default(string), double? amount = default(double?), double? insuredValue = default(double?), Services services = default(Services), string discount = default(string), string variableSymbol = default(string), string custNum = default(string), string zipCodeAddr = default(string))
        {
            this.ParcelCode = parcelCode;
            this.StatusID = statusID;
            this.ReasonID = reasonID;
            this.TimeStamp = timeStamp;
            this.PostOffice = postOffice;
            this.PayoutAmount = payoutAmount;
            this.Weight = weight;
            this.Amount = amount;
            this.InsuredValue = insuredValue;
            this.Services = services;
            this.Discount = discount;
            this.VariableSymbol = variableSymbol;
            this.CustNum = custNum;
            this.ZipCodeAddr = zipCodeAddr;
        }
        
        /// <summary>
        /// Gets or Sets ParcelCode
        /// </summary>
        [DataMember(Name="parcelCode", EmitDefaultValue=false)]
        public string ParcelCode { get; set; }

        /// <summary>
        /// Status ID. / ID stavu.
        /// </summary>
        /// <value>Status ID. / ID stavu.</value>
        [DataMember(Name="statusID", EmitDefaultValue=false)]
        public string StatusID { get; set; }

        /// <summary>
        /// Reason ID.  / ID důvodu ke stavu.
        /// </summary>
        /// <value>Reason ID.  / ID důvodu ke stavu.</value>
        [DataMember(Name="reasonID", EmitDefaultValue=false)]
        public string ReasonID { get; set; }

        /// <summary>
        /// Date and time of consignment status origin. / Datum a čas vzniku stavu zásilky.
        /// </summary>
        /// <value>Date and time of consignment status origin. / Datum a čas vzniku stavu zásilky.</value>
        [DataMember(Name="timeStamp", EmitDefaultValue=false)]
        public DateTime? TimeStamp { get; set; }

        /// <summary>
        /// Postcode of the post office of the status origin. / PSČ místa vzniku stavu.
        /// </summary>
        /// <value>Postcode of the post office of the status origin. / PSČ místa vzniku stavu.</value>
        [DataMember(Name="postOffice", EmitDefaultValue=false)]
        public string PostOffice { get; set; }

        /// <summary>
        /// Gets or Sets PayoutAmount
        /// </summary>
        [DataMember(Name="payoutAmount", EmitDefaultValue=false)]
        public double? PayoutAmount { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public string Weight { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets InsuredValue
        /// </summary>
        [DataMember(Name="insuredValue", EmitDefaultValue=false)]
        public double? InsuredValue { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public Services Services { get; set; }

        /// <summary>
        /// Collection tariff. / Tarif za svoz.
        /// </summary>
        /// <value>Collection tariff. / Tarif za svoz.</value>
        [DataMember(Name="discount", EmitDefaultValue=false)]
        public string Discount { get; set; }

        /// <summary>
        /// Variable symbol. / Variabilní symbol.
        /// </summary>
        /// <value>Variable symbol. / Variabilní symbol.</value>
        [DataMember(Name="variableSymbol", EmitDefaultValue=false)]
        public string VariableSymbol { get; set; }

        /// <summary>
        /// Number of customer by Sender. / Číslo zákazníka u podavatele.
        /// </summary>
        /// <value>Number of customer by Sender. / Číslo zákazníka u podavatele.</value>
        [DataMember(Name="custNum", EmitDefaultValue=false)]
        public string CustNum { get; set; }

        /// <summary>
        /// Postal code of Addressee. / PSČ adresáta.
        /// </summary>
        /// <value>Postal code of Addressee. / PSČ adresáta.</value>
        [DataMember(Name="zipCodeAddr", EmitDefaultValue=false)]
        public string ZipCodeAddr { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParcelInfoPeriod {\n");
            sb.Append("  ParcelCode: ").Append(ParcelCode).Append("\n");
            sb.Append("  StatusID: ").Append(StatusID).Append("\n");
            sb.Append("  ReasonID: ").Append(ReasonID).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("  PostOffice: ").Append(PostOffice).Append("\n");
            sb.Append("  PayoutAmount: ").Append(PayoutAmount).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  InsuredValue: ").Append(InsuredValue).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Discount: ").Append(Discount).Append("\n");
            sb.Append("  VariableSymbol: ").Append(VariableSymbol).Append("\n");
            sb.Append("  CustNum: ").Append(CustNum).Append("\n");
            sb.Append("  ZipCodeAddr: ").Append(ZipCodeAddr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelInfoPeriod);
        }

        /// <summary>
        /// Returns true if ParcelInfoPeriod instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelInfoPeriod to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelInfoPeriod input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParcelCode == input.ParcelCode ||
                    (this.ParcelCode != null &&
                    this.ParcelCode.Equals(input.ParcelCode))
                ) && 
                (
                    this.StatusID == input.StatusID ||
                    (this.StatusID != null &&
                    this.StatusID.Equals(input.StatusID))
                ) && 
                (
                    this.ReasonID == input.ReasonID ||
                    (this.ReasonID != null &&
                    this.ReasonID.Equals(input.ReasonID))
                ) && 
                (
                    this.TimeStamp == input.TimeStamp ||
                    (this.TimeStamp != null &&
                    this.TimeStamp.Equals(input.TimeStamp))
                ) && 
                (
                    this.PostOffice == input.PostOffice ||
                    (this.PostOffice != null &&
                    this.PostOffice.Equals(input.PostOffice))
                ) && 
                (
                    this.PayoutAmount == input.PayoutAmount ||
                    (this.PayoutAmount != null &&
                    this.PayoutAmount.Equals(input.PayoutAmount))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.InsuredValue == input.InsuredValue ||
                    (this.InsuredValue != null &&
                    this.InsuredValue.Equals(input.InsuredValue))
                ) && 
                (
                    this.Services == input.Services ||
                    (this.Services != null &&
                    this.Services.Equals(input.Services))
                ) && 
                (
                    this.Discount == input.Discount ||
                    (this.Discount != null &&
                    this.Discount.Equals(input.Discount))
                ) && 
                (
                    this.VariableSymbol == input.VariableSymbol ||
                    (this.VariableSymbol != null &&
                    this.VariableSymbol.Equals(input.VariableSymbol))
                ) && 
                (
                    this.CustNum == input.CustNum ||
                    (this.CustNum != null &&
                    this.CustNum.Equals(input.CustNum))
                ) && 
                (
                    this.ZipCodeAddr == input.ZipCodeAddr ||
                    (this.ZipCodeAddr != null &&
                    this.ZipCodeAddr.Equals(input.ZipCodeAddr))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParcelCode != null)
                    hashCode = hashCode * 59 + this.ParcelCode.GetHashCode();
                if (this.StatusID != null)
                    hashCode = hashCode * 59 + this.StatusID.GetHashCode();
                if (this.ReasonID != null)
                    hashCode = hashCode * 59 + this.ReasonID.GetHashCode();
                if (this.TimeStamp != null)
                    hashCode = hashCode * 59 + this.TimeStamp.GetHashCode();
                if (this.PostOffice != null)
                    hashCode = hashCode * 59 + this.PostOffice.GetHashCode();
                if (this.PayoutAmount != null)
                    hashCode = hashCode * 59 + this.PayoutAmount.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.InsuredValue != null)
                    hashCode = hashCode * 59 + this.InsuredValue.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.Discount != null)
                    hashCode = hashCode * 59 + this.Discount.GetHashCode();
                if (this.VariableSymbol != null)
                    hashCode = hashCode * 59 + this.VariableSymbol.GetHashCode();
                if (this.CustNum != null)
                    hashCode = hashCode * 59 + this.CustNum.GetHashCode();
                if (this.ZipCodeAddr != null)
                    hashCode = hashCode * 59 + this.ZipCodeAddr.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
