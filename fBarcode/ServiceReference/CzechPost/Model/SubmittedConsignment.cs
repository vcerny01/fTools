/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// SubmittedConsignment
    /// </summary>
    [DataContract]
        public partial class SubmittedConsignment :  IEquatable<SubmittedConsignment>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SubmittedConsignment" /> class.
        /// </summary>
        /// <param name="parcelCode">parcelCode.</param>
        /// <param name="prefix">prefix.</param>
        /// <param name="transmissionDate">transmissionDate.</param>
        /// <param name="postCode">postCode.</param>
        /// <param name="postOfficeName">Office name of transmission. / Název provozovny, kde došlo k podání..</param>
        /// <param name="variableSymbol">Variable symbol. / Variabilní symbol..</param>
        /// <param name="services">services.</param>
        /// <param name="weight">weight.</param>
        /// <param name="amount">amount.</param>
        /// <param name="payoutAmount">payoutAmount.</param>
        /// <param name="multipartConsignmentMaster">Parcel code of master consignemnt in case of multi-part parcels. / ID hlavní zásilky v případě vícekusových zásilek..</param>
        /// <param name="multipartConsignmentOrder">Order of the consingment in case of multi-part parcels. / Pořadí zásilky v případě vícekusových zásilek..</param>
        /// <param name="multipartConsignmentNumber">Number of the consignments in case of multi-part parcels. / Počet zásilek v případě vícekusovýh zásilek..</param>
        /// <param name="customerID">customerID.</param>
        /// <param name="idContractHeadquarters">idContractHeadquarters.</param>
        /// <param name="idContractBranch">idContractBranch.</param>
        /// <param name="customerCard">customerCard.</param>
        /// <param name="addressee">addressee.</param>
        /// <param name="deliveryAttemptDate">Date of delivery atempt of the consignment. / Datum dodání (pokus o doručení) zásilky..</param>
        /// <param name="deliveryAttemptPostOffice">Zip code of the post office of delivery of the consignment. / PSČ místa dodání zásilky..</param>
        /// <param name="deliveryAttemptPostOfficeName">Name of the post office of the consignment&#x27;s delivery attempt. / Název místa dodání zásilky..</param>
        /// <param name="deliveryAttemptStatusText">The name of the status when attempted to deliver. / Název stavu při dodání..</param>
        /// <param name="saveToDate">Date of saving of the consignment in the office. / Datum uložení do..</param>
        /// <param name="saveToPostOffice">ZipCode of the post office of saving of the consignment. / PSČ provozovny pro uložení zásilky..</param>
        /// <param name="saveToPostOfficeName">Name of the post office of saving of the consignment. / Název provozovny pro uložení zásilky..</param>
        /// <param name="saveToStatusText">Name of the status when save to the Save post office. / Název stavu při uložení na ukládací poštu..</param>
        /// <param name="dateD1">Date for D+1 . / Datum pro D+1 režim..</param>
        /// <param name="deliveryDate">Date of delivery of the consignment. / Datum doručení zásilky..</param>
        /// <param name="priorityD1">Fulfillment of priority D+1. / Plnění D+1..</param>
        /// <param name="deliveryTime">Time for deliver. / Doba doručení..</param>
        /// <param name="deliveryPostOffice">Post code of the office which deliver. / PSČ provozovny, která doručuje..</param>
        /// <param name="deliveryPostOfficeName">Name of the post office which deliver. / Název provozovny, která doručuje..</param>
        /// <param name="deliveryStatusText">Name of the status when deliver. / Název stavu při doručení..</param>
        /// <param name="returnDate">Date of return of the consignment, format ISO8601. / Datum vrácení zásilky, formát ISO8601..</param>
        /// <param name="returnPostOffice">Zip code of the post office, when returned. / PSČ provozovny, kam se vrací..</param>
        /// <param name="returnPostOfficeName">Name of the post office, when returned. / Název provozovny, kam se vrací..</param>
        /// <param name="returnStatusText">Name of the status when returned. / Název stavu při vrácení..</param>
        /// <param name="customerNumberSender">Number of customer (Sender). / Číslo zákazníka (podavatel)..</param>
        /// <param name="isoCountryTo">ISO code of the country where will be delivered to. / ISO kód země, do které bude doručeno..</param>
        /// <param name="nameCountryTo">Name of the country. / Název země..</param>
        public SubmittedConsignment(string parcelCode = default(string), string prefix = default(string), DateTime? transmissionDate = default(DateTime?), string postCode = default(string), string postOfficeName = default(string), string variableSymbol = default(string), Services services = default(Services), string weight = default(string), double? amount = default(double?), double? payoutAmount = default(double?), string multipartConsignmentMaster = default(string), string multipartConsignmentOrder = default(string), string multipartConsignmentNumber = default(string), string customerID = default(string), string idContractHeadquarters = default(string), string idContractBranch = default(string), string customerCard = default(string), Addressee addressee = default(Addressee), DateTime? deliveryAttemptDate = default(DateTime?), string deliveryAttemptPostOffice = default(string), string deliveryAttemptPostOfficeName = default(string), string deliveryAttemptStatusText = default(string), DateTime? saveToDate = default(DateTime?), string saveToPostOffice = default(string), string saveToPostOfficeName = default(string), string saveToStatusText = default(string), DateTime? dateD1 = default(DateTime?), DateTime? deliveryDate = default(DateTime?), string priorityD1 = default(string), string deliveryTime = default(string), string deliveryPostOffice = default(string), string deliveryPostOfficeName = default(string), string deliveryStatusText = default(string), DateTime? returnDate = default(DateTime?), string returnPostOffice = default(string), string returnPostOfficeName = default(string), string returnStatusText = default(string), string customerNumberSender = default(string), string isoCountryTo = default(string), string nameCountryTo = default(string))
        {
            this.ParcelCode = parcelCode;
            this.Prefix = prefix;
            this.TransmissionDate = transmissionDate;
            this.PostCode = postCode;
            this.PostOfficeName = postOfficeName;
            this.VariableSymbol = variableSymbol;
            this.Services = services;
            this.Weight = weight;
            this.Amount = amount;
            this.PayoutAmount = payoutAmount;
            this.MultipartConsignmentMaster = multipartConsignmentMaster;
            this.MultipartConsignmentOrder = multipartConsignmentOrder;
            this.MultipartConsignmentNumber = multipartConsignmentNumber;
            this.CustomerID = customerID;
            this.IdContractHeadquarters = idContractHeadquarters;
            this.IdContractBranch = idContractBranch;
            this.CustomerCard = customerCard;
            this.Addressee = addressee;
            this.DeliveryAttemptDate = deliveryAttemptDate;
            this.DeliveryAttemptPostOffice = deliveryAttemptPostOffice;
            this.DeliveryAttemptPostOfficeName = deliveryAttemptPostOfficeName;
            this.DeliveryAttemptStatusText = deliveryAttemptStatusText;
            this.SaveToDate = saveToDate;
            this.SaveToPostOffice = saveToPostOffice;
            this.SaveToPostOfficeName = saveToPostOfficeName;
            this.SaveToStatusText = saveToStatusText;
            this.DateD1 = dateD1;
            this.DeliveryDate = deliveryDate;
            this.PriorityD1 = priorityD1;
            this.DeliveryTime = deliveryTime;
            this.DeliveryPostOffice = deliveryPostOffice;
            this.DeliveryPostOfficeName = deliveryPostOfficeName;
            this.DeliveryStatusText = deliveryStatusText;
            this.ReturnDate = returnDate;
            this.ReturnPostOffice = returnPostOffice;
            this.ReturnPostOfficeName = returnPostOfficeName;
            this.ReturnStatusText = returnStatusText;
            this.CustomerNumberSender = customerNumberSender;
            this.IsoCountryTo = isoCountryTo;
            this.NameCountryTo = nameCountryTo;
        }
        
        /// <summary>
        /// Gets or Sets ParcelCode
        /// </summary>
        [DataMember(Name="parcelCode", EmitDefaultValue=false)]
        public string ParcelCode { get; set; }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [DataMember(Name="prefix", EmitDefaultValue=false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Gets or Sets TransmissionDate
        /// </summary>
        [DataMember(Name="transmissionDate", EmitDefaultValue=false)]
        public DateTime? TransmissionDate { get; set; }

        /// <summary>
        /// Gets or Sets PostCode
        /// </summary>
        [DataMember(Name="postCode", EmitDefaultValue=false)]
        public string PostCode { get; set; }

        /// <summary>
        /// Office name of transmission. / Název provozovny, kde došlo k podání.
        /// </summary>
        /// <value>Office name of transmission. / Název provozovny, kde došlo k podání.</value>
        [DataMember(Name="postOfficeName", EmitDefaultValue=false)]
        public string PostOfficeName { get; set; }

        /// <summary>
        /// Variable symbol. / Variabilní symbol.
        /// </summary>
        /// <value>Variable symbol. / Variabilní symbol.</value>
        [DataMember(Name="variableSymbol", EmitDefaultValue=false)]
        public string VariableSymbol { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public Services Services { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public string Weight { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets PayoutAmount
        /// </summary>
        [DataMember(Name="payoutAmount", EmitDefaultValue=false)]
        public double? PayoutAmount { get; set; }

        /// <summary>
        /// Parcel code of master consignemnt in case of multi-part parcels. / ID hlavní zásilky v případě vícekusových zásilek.
        /// </summary>
        /// <value>Parcel code of master consignemnt in case of multi-part parcels. / ID hlavní zásilky v případě vícekusových zásilek.</value>
        [DataMember(Name="multipartConsignmentMaster", EmitDefaultValue=false)]
        public string MultipartConsignmentMaster { get; set; }

        /// <summary>
        /// Order of the consingment in case of multi-part parcels. / Pořadí zásilky v případě vícekusových zásilek.
        /// </summary>
        /// <value>Order of the consingment in case of multi-part parcels. / Pořadí zásilky v případě vícekusových zásilek.</value>
        [DataMember(Name="multipartConsignmentOrder", EmitDefaultValue=false)]
        public string MultipartConsignmentOrder { get; set; }

        /// <summary>
        /// Number of the consignments in case of multi-part parcels. / Počet zásilek v případě vícekusovýh zásilek.
        /// </summary>
        /// <value>Number of the consignments in case of multi-part parcels. / Počet zásilek v případě vícekusovýh zásilek.</value>
        [DataMember(Name="multipartConsignmentNumber", EmitDefaultValue=false)]
        public string MultipartConsignmentNumber { get; set; }

        /// <summary>
        /// Gets or Sets CustomerID
        /// </summary>
        [DataMember(Name="customerID", EmitDefaultValue=false)]
        public string CustomerID { get; set; }

        /// <summary>
        /// Gets or Sets IdContractHeadquarters
        /// </summary>
        [DataMember(Name="idContractHeadquarters", EmitDefaultValue=false)]
        public string IdContractHeadquarters { get; set; }

        /// <summary>
        /// Gets or Sets IdContractBranch
        /// </summary>
        [DataMember(Name="idContractBranch", EmitDefaultValue=false)]
        public string IdContractBranch { get; set; }

        /// <summary>
        /// Gets or Sets CustomerCard
        /// </summary>
        [DataMember(Name="customerCard", EmitDefaultValue=false)]
        public string CustomerCard { get; set; }

        /// <summary>
        /// Gets or Sets Addressee
        /// </summary>
        [DataMember(Name="addressee", EmitDefaultValue=false)]
        public Addressee Addressee { get; set; }

        /// <summary>
        /// Date of delivery atempt of the consignment. / Datum dodání (pokus o doručení) zásilky.
        /// </summary>
        /// <value>Date of delivery atempt of the consignment. / Datum dodání (pokus o doručení) zásilky.</value>
        [DataMember(Name="deliveryAttemptDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DeliveryAttemptDate { get; set; }

        /// <summary>
        /// Zip code of the post office of delivery of the consignment. / PSČ místa dodání zásilky.
        /// </summary>
        /// <value>Zip code of the post office of delivery of the consignment. / PSČ místa dodání zásilky.</value>
        [DataMember(Name="deliveryAttemptPostOffice", EmitDefaultValue=false)]
        public string DeliveryAttemptPostOffice { get; set; }

        /// <summary>
        /// Name of the post office of the consignment&#x27;s delivery attempt. / Název místa dodání zásilky.
        /// </summary>
        /// <value>Name of the post office of the consignment&#x27;s delivery attempt. / Název místa dodání zásilky.</value>
        [DataMember(Name="deliveryAttemptPostOfficeName", EmitDefaultValue=false)]
        public string DeliveryAttemptPostOfficeName { get; set; }

        /// <summary>
        /// The name of the status when attempted to deliver. / Název stavu při dodání.
        /// </summary>
        /// <value>The name of the status when attempted to deliver. / Název stavu při dodání.</value>
        [DataMember(Name="deliveryAttemptStatusText", EmitDefaultValue=false)]
        public string DeliveryAttemptStatusText { get; set; }

        /// <summary>
        /// Date of saving of the consignment in the office. / Datum uložení do.
        /// </summary>
        /// <value>Date of saving of the consignment in the office. / Datum uložení do.</value>
        [DataMember(Name="saveToDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? SaveToDate { get; set; }

        /// <summary>
        /// ZipCode of the post office of saving of the consignment. / PSČ provozovny pro uložení zásilky.
        /// </summary>
        /// <value>ZipCode of the post office of saving of the consignment. / PSČ provozovny pro uložení zásilky.</value>
        [DataMember(Name="saveToPostOffice", EmitDefaultValue=false)]
        public string SaveToPostOffice { get; set; }

        /// <summary>
        /// Name of the post office of saving of the consignment. / Název provozovny pro uložení zásilky.
        /// </summary>
        /// <value>Name of the post office of saving of the consignment. / Název provozovny pro uložení zásilky.</value>
        [DataMember(Name="saveToPostOfficeName", EmitDefaultValue=false)]
        public string SaveToPostOfficeName { get; set; }

        /// <summary>
        /// Name of the status when save to the Save post office. / Název stavu při uložení na ukládací poštu.
        /// </summary>
        /// <value>Name of the status when save to the Save post office. / Název stavu při uložení na ukládací poštu.</value>
        [DataMember(Name="saveToStatusText", EmitDefaultValue=false)]
        public string SaveToStatusText { get; set; }

        /// <summary>
        /// Date for D+1 . / Datum pro D+1 režim.
        /// </summary>
        /// <value>Date for D+1 . / Datum pro D+1 režim.</value>
        [DataMember(Name="dateD1", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DateD1 { get; set; }

        /// <summary>
        /// Date of delivery of the consignment. / Datum doručení zásilky.
        /// </summary>
        /// <value>Date of delivery of the consignment. / Datum doručení zásilky.</value>
        [DataMember(Name="deliveryDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DeliveryDate { get; set; }

        /// <summary>
        /// Fulfillment of priority D+1. / Plnění D+1.
        /// </summary>
        /// <value>Fulfillment of priority D+1. / Plnění D+1.</value>
        [DataMember(Name="priorityD1", EmitDefaultValue=false)]
        public string PriorityD1 { get; set; }

        /// <summary>
        /// Time for deliver. / Doba doručení.
        /// </summary>
        /// <value>Time for deliver. / Doba doručení.</value>
        [DataMember(Name="deliveryTime", EmitDefaultValue=false)]
        public string DeliveryTime { get; set; }

        /// <summary>
        /// Post code of the office which deliver. / PSČ provozovny, která doručuje.
        /// </summary>
        /// <value>Post code of the office which deliver. / PSČ provozovny, která doručuje.</value>
        [DataMember(Name="deliveryPostOffice", EmitDefaultValue=false)]
        public string DeliveryPostOffice { get; set; }

        /// <summary>
        /// Name of the post office which deliver. / Název provozovny, která doručuje.
        /// </summary>
        /// <value>Name of the post office which deliver. / Název provozovny, která doručuje.</value>
        [DataMember(Name="deliveryPostOfficeName", EmitDefaultValue=false)]
        public string DeliveryPostOfficeName { get; set; }

        /// <summary>
        /// Name of the status when deliver. / Název stavu při doručení.
        /// </summary>
        /// <value>Name of the status when deliver. / Název stavu při doručení.</value>
        [DataMember(Name="deliveryStatusText", EmitDefaultValue=false)]
        public string DeliveryStatusText { get; set; }

        /// <summary>
        /// Date of return of the consignment, format ISO8601. / Datum vrácení zásilky, formát ISO8601.
        /// </summary>
        /// <value>Date of return of the consignment, format ISO8601. / Datum vrácení zásilky, formát ISO8601.</value>
        [DataMember(Name="returnDate", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? ReturnDate { get; set; }

        /// <summary>
        /// Zip code of the post office, when returned. / PSČ provozovny, kam se vrací.
        /// </summary>
        /// <value>Zip code of the post office, when returned. / PSČ provozovny, kam se vrací.</value>
        [DataMember(Name="returnPostOffice", EmitDefaultValue=false)]
        public string ReturnPostOffice { get; set; }

        /// <summary>
        /// Name of the post office, when returned. / Název provozovny, kam se vrací.
        /// </summary>
        /// <value>Name of the post office, when returned. / Název provozovny, kam se vrací.</value>
        [DataMember(Name="returnPostOfficeName", EmitDefaultValue=false)]
        public string ReturnPostOfficeName { get; set; }

        /// <summary>
        /// Name of the status when returned. / Název stavu při vrácení.
        /// </summary>
        /// <value>Name of the status when returned. / Název stavu při vrácení.</value>
        [DataMember(Name="returnStatusText", EmitDefaultValue=false)]
        public string ReturnStatusText { get; set; }

        /// <summary>
        /// Number of customer (Sender). / Číslo zákazníka (podavatel).
        /// </summary>
        /// <value>Number of customer (Sender). / Číslo zákazníka (podavatel).</value>
        [DataMember(Name="customerNumberSender", EmitDefaultValue=false)]
        public string CustomerNumberSender { get; set; }

        /// <summary>
        /// ISO code of the country where will be delivered to. / ISO kód země, do které bude doručeno.
        /// </summary>
        /// <value>ISO code of the country where will be delivered to. / ISO kód země, do které bude doručeno.</value>
        [DataMember(Name="isoCountryTo", EmitDefaultValue=false)]
        public string IsoCountryTo { get; set; }

        /// <summary>
        /// Name of the country. / Název země.
        /// </summary>
        /// <value>Name of the country. / Název země.</value>
        [DataMember(Name="nameCountryTo", EmitDefaultValue=false)]
        public string NameCountryTo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubmittedConsignment {\n");
            sb.Append("  ParcelCode: ").Append(ParcelCode).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  TransmissionDate: ").Append(TransmissionDate).Append("\n");
            sb.Append("  PostCode: ").Append(PostCode).Append("\n");
            sb.Append("  PostOfficeName: ").Append(PostOfficeName).Append("\n");
            sb.Append("  VariableSymbol: ").Append(VariableSymbol).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  PayoutAmount: ").Append(PayoutAmount).Append("\n");
            sb.Append("  MultipartConsignmentMaster: ").Append(MultipartConsignmentMaster).Append("\n");
            sb.Append("  MultipartConsignmentOrder: ").Append(MultipartConsignmentOrder).Append("\n");
            sb.Append("  MultipartConsignmentNumber: ").Append(MultipartConsignmentNumber).Append("\n");
            sb.Append("  CustomerID: ").Append(CustomerID).Append("\n");
            sb.Append("  IdContractHeadquarters: ").Append(IdContractHeadquarters).Append("\n");
            sb.Append("  IdContractBranch: ").Append(IdContractBranch).Append("\n");
            sb.Append("  CustomerCard: ").Append(CustomerCard).Append("\n");
            sb.Append("  Addressee: ").Append(Addressee).Append("\n");
            sb.Append("  DeliveryAttemptDate: ").Append(DeliveryAttemptDate).Append("\n");
            sb.Append("  DeliveryAttemptPostOffice: ").Append(DeliveryAttemptPostOffice).Append("\n");
            sb.Append("  DeliveryAttemptPostOfficeName: ").Append(DeliveryAttemptPostOfficeName).Append("\n");
            sb.Append("  DeliveryAttemptStatusText: ").Append(DeliveryAttemptStatusText).Append("\n");
            sb.Append("  SaveToDate: ").Append(SaveToDate).Append("\n");
            sb.Append("  SaveToPostOffice: ").Append(SaveToPostOffice).Append("\n");
            sb.Append("  SaveToPostOfficeName: ").Append(SaveToPostOfficeName).Append("\n");
            sb.Append("  SaveToStatusText: ").Append(SaveToStatusText).Append("\n");
            sb.Append("  DateD1: ").Append(DateD1).Append("\n");
            sb.Append("  DeliveryDate: ").Append(DeliveryDate).Append("\n");
            sb.Append("  PriorityD1: ").Append(PriorityD1).Append("\n");
            sb.Append("  DeliveryTime: ").Append(DeliveryTime).Append("\n");
            sb.Append("  DeliveryPostOffice: ").Append(DeliveryPostOffice).Append("\n");
            sb.Append("  DeliveryPostOfficeName: ").Append(DeliveryPostOfficeName).Append("\n");
            sb.Append("  DeliveryStatusText: ").Append(DeliveryStatusText).Append("\n");
            sb.Append("  ReturnDate: ").Append(ReturnDate).Append("\n");
            sb.Append("  ReturnPostOffice: ").Append(ReturnPostOffice).Append("\n");
            sb.Append("  ReturnPostOfficeName: ").Append(ReturnPostOfficeName).Append("\n");
            sb.Append("  ReturnStatusText: ").Append(ReturnStatusText).Append("\n");
            sb.Append("  CustomerNumberSender: ").Append(CustomerNumberSender).Append("\n");
            sb.Append("  IsoCountryTo: ").Append(IsoCountryTo).Append("\n");
            sb.Append("  NameCountryTo: ").Append(NameCountryTo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SubmittedConsignment);
        }

        /// <summary>
        /// Returns true if SubmittedConsignment instances are equal
        /// </summary>
        /// <param name="input">Instance of SubmittedConsignment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubmittedConsignment input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParcelCode == input.ParcelCode ||
                    (this.ParcelCode != null &&
                    this.ParcelCode.Equals(input.ParcelCode))
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                ) && 
                (
                    this.TransmissionDate == input.TransmissionDate ||
                    (this.TransmissionDate != null &&
                    this.TransmissionDate.Equals(input.TransmissionDate))
                ) && 
                (
                    this.PostCode == input.PostCode ||
                    (this.PostCode != null &&
                    this.PostCode.Equals(input.PostCode))
                ) && 
                (
                    this.PostOfficeName == input.PostOfficeName ||
                    (this.PostOfficeName != null &&
                    this.PostOfficeName.Equals(input.PostOfficeName))
                ) && 
                (
                    this.VariableSymbol == input.VariableSymbol ||
                    (this.VariableSymbol != null &&
                    this.VariableSymbol.Equals(input.VariableSymbol))
                ) && 
                (
                    this.Services == input.Services ||
                    (this.Services != null &&
                    this.Services.Equals(input.Services))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.PayoutAmount == input.PayoutAmount ||
                    (this.PayoutAmount != null &&
                    this.PayoutAmount.Equals(input.PayoutAmount))
                ) && 
                (
                    this.MultipartConsignmentMaster == input.MultipartConsignmentMaster ||
                    (this.MultipartConsignmentMaster != null &&
                    this.MultipartConsignmentMaster.Equals(input.MultipartConsignmentMaster))
                ) && 
                (
                    this.MultipartConsignmentOrder == input.MultipartConsignmentOrder ||
                    (this.MultipartConsignmentOrder != null &&
                    this.MultipartConsignmentOrder.Equals(input.MultipartConsignmentOrder))
                ) && 
                (
                    this.MultipartConsignmentNumber == input.MultipartConsignmentNumber ||
                    (this.MultipartConsignmentNumber != null &&
                    this.MultipartConsignmentNumber.Equals(input.MultipartConsignmentNumber))
                ) && 
                (
                    this.CustomerID == input.CustomerID ||
                    (this.CustomerID != null &&
                    this.CustomerID.Equals(input.CustomerID))
                ) && 
                (
                    this.IdContractHeadquarters == input.IdContractHeadquarters ||
                    (this.IdContractHeadquarters != null &&
                    this.IdContractHeadquarters.Equals(input.IdContractHeadquarters))
                ) && 
                (
                    this.IdContractBranch == input.IdContractBranch ||
                    (this.IdContractBranch != null &&
                    this.IdContractBranch.Equals(input.IdContractBranch))
                ) && 
                (
                    this.CustomerCard == input.CustomerCard ||
                    (this.CustomerCard != null &&
                    this.CustomerCard.Equals(input.CustomerCard))
                ) && 
                (
                    this.Addressee == input.Addressee ||
                    (this.Addressee != null &&
                    this.Addressee.Equals(input.Addressee))
                ) && 
                (
                    this.DeliveryAttemptDate == input.DeliveryAttemptDate ||
                    (this.DeliveryAttemptDate != null &&
                    this.DeliveryAttemptDate.Equals(input.DeliveryAttemptDate))
                ) && 
                (
                    this.DeliveryAttemptPostOffice == input.DeliveryAttemptPostOffice ||
                    (this.DeliveryAttemptPostOffice != null &&
                    this.DeliveryAttemptPostOffice.Equals(input.DeliveryAttemptPostOffice))
                ) && 
                (
                    this.DeliveryAttemptPostOfficeName == input.DeliveryAttemptPostOfficeName ||
                    (this.DeliveryAttemptPostOfficeName != null &&
                    this.DeliveryAttemptPostOfficeName.Equals(input.DeliveryAttemptPostOfficeName))
                ) && 
                (
                    this.DeliveryAttemptStatusText == input.DeliveryAttemptStatusText ||
                    (this.DeliveryAttemptStatusText != null &&
                    this.DeliveryAttemptStatusText.Equals(input.DeliveryAttemptStatusText))
                ) && 
                (
                    this.SaveToDate == input.SaveToDate ||
                    (this.SaveToDate != null &&
                    this.SaveToDate.Equals(input.SaveToDate))
                ) && 
                (
                    this.SaveToPostOffice == input.SaveToPostOffice ||
                    (this.SaveToPostOffice != null &&
                    this.SaveToPostOffice.Equals(input.SaveToPostOffice))
                ) && 
                (
                    this.SaveToPostOfficeName == input.SaveToPostOfficeName ||
                    (this.SaveToPostOfficeName != null &&
                    this.SaveToPostOfficeName.Equals(input.SaveToPostOfficeName))
                ) && 
                (
                    this.SaveToStatusText == input.SaveToStatusText ||
                    (this.SaveToStatusText != null &&
                    this.SaveToStatusText.Equals(input.SaveToStatusText))
                ) && 
                (
                    this.DateD1 == input.DateD1 ||
                    (this.DateD1 != null &&
                    this.DateD1.Equals(input.DateD1))
                ) && 
                (
                    this.DeliveryDate == input.DeliveryDate ||
                    (this.DeliveryDate != null &&
                    this.DeliveryDate.Equals(input.DeliveryDate))
                ) && 
                (
                    this.PriorityD1 == input.PriorityD1 ||
                    (this.PriorityD1 != null &&
                    this.PriorityD1.Equals(input.PriorityD1))
                ) && 
                (
                    this.DeliveryTime == input.DeliveryTime ||
                    (this.DeliveryTime != null &&
                    this.DeliveryTime.Equals(input.DeliveryTime))
                ) && 
                (
                    this.DeliveryPostOffice == input.DeliveryPostOffice ||
                    (this.DeliveryPostOffice != null &&
                    this.DeliveryPostOffice.Equals(input.DeliveryPostOffice))
                ) && 
                (
                    this.DeliveryPostOfficeName == input.DeliveryPostOfficeName ||
                    (this.DeliveryPostOfficeName != null &&
                    this.DeliveryPostOfficeName.Equals(input.DeliveryPostOfficeName))
                ) && 
                (
                    this.DeliveryStatusText == input.DeliveryStatusText ||
                    (this.DeliveryStatusText != null &&
                    this.DeliveryStatusText.Equals(input.DeliveryStatusText))
                ) && 
                (
                    this.ReturnDate == input.ReturnDate ||
                    (this.ReturnDate != null &&
                    this.ReturnDate.Equals(input.ReturnDate))
                ) && 
                (
                    this.ReturnPostOffice == input.ReturnPostOffice ||
                    (this.ReturnPostOffice != null &&
                    this.ReturnPostOffice.Equals(input.ReturnPostOffice))
                ) && 
                (
                    this.ReturnPostOfficeName == input.ReturnPostOfficeName ||
                    (this.ReturnPostOfficeName != null &&
                    this.ReturnPostOfficeName.Equals(input.ReturnPostOfficeName))
                ) && 
                (
                    this.ReturnStatusText == input.ReturnStatusText ||
                    (this.ReturnStatusText != null &&
                    this.ReturnStatusText.Equals(input.ReturnStatusText))
                ) && 
                (
                    this.CustomerNumberSender == input.CustomerNumberSender ||
                    (this.CustomerNumberSender != null &&
                    this.CustomerNumberSender.Equals(input.CustomerNumberSender))
                ) && 
                (
                    this.IsoCountryTo == input.IsoCountryTo ||
                    (this.IsoCountryTo != null &&
                    this.IsoCountryTo.Equals(input.IsoCountryTo))
                ) && 
                (
                    this.NameCountryTo == input.NameCountryTo ||
                    (this.NameCountryTo != null &&
                    this.NameCountryTo.Equals(input.NameCountryTo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParcelCode != null)
                    hashCode = hashCode * 59 + this.ParcelCode.GetHashCode();
                if (this.Prefix != null)
                    hashCode = hashCode * 59 + this.Prefix.GetHashCode();
                if (this.TransmissionDate != null)
                    hashCode = hashCode * 59 + this.TransmissionDate.GetHashCode();
                if (this.PostCode != null)
                    hashCode = hashCode * 59 + this.PostCode.GetHashCode();
                if (this.PostOfficeName != null)
                    hashCode = hashCode * 59 + this.PostOfficeName.GetHashCode();
                if (this.VariableSymbol != null)
                    hashCode = hashCode * 59 + this.VariableSymbol.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.PayoutAmount != null)
                    hashCode = hashCode * 59 + this.PayoutAmount.GetHashCode();
                if (this.MultipartConsignmentMaster != null)
                    hashCode = hashCode * 59 + this.MultipartConsignmentMaster.GetHashCode();
                if (this.MultipartConsignmentOrder != null)
                    hashCode = hashCode * 59 + this.MultipartConsignmentOrder.GetHashCode();
                if (this.MultipartConsignmentNumber != null)
                    hashCode = hashCode * 59 + this.MultipartConsignmentNumber.GetHashCode();
                if (this.CustomerID != null)
                    hashCode = hashCode * 59 + this.CustomerID.GetHashCode();
                if (this.IdContractHeadquarters != null)
                    hashCode = hashCode * 59 + this.IdContractHeadquarters.GetHashCode();
                if (this.IdContractBranch != null)
                    hashCode = hashCode * 59 + this.IdContractBranch.GetHashCode();
                if (this.CustomerCard != null)
                    hashCode = hashCode * 59 + this.CustomerCard.GetHashCode();
                if (this.Addressee != null)
                    hashCode = hashCode * 59 + this.Addressee.GetHashCode();
                if (this.DeliveryAttemptDate != null)
                    hashCode = hashCode * 59 + this.DeliveryAttemptDate.GetHashCode();
                if (this.DeliveryAttemptPostOffice != null)
                    hashCode = hashCode * 59 + this.DeliveryAttemptPostOffice.GetHashCode();
                if (this.DeliveryAttemptPostOfficeName != null)
                    hashCode = hashCode * 59 + this.DeliveryAttemptPostOfficeName.GetHashCode();
                if (this.DeliveryAttemptStatusText != null)
                    hashCode = hashCode * 59 + this.DeliveryAttemptStatusText.GetHashCode();
                if (this.SaveToDate != null)
                    hashCode = hashCode * 59 + this.SaveToDate.GetHashCode();
                if (this.SaveToPostOffice != null)
                    hashCode = hashCode * 59 + this.SaveToPostOffice.GetHashCode();
                if (this.SaveToPostOfficeName != null)
                    hashCode = hashCode * 59 + this.SaveToPostOfficeName.GetHashCode();
                if (this.SaveToStatusText != null)
                    hashCode = hashCode * 59 + this.SaveToStatusText.GetHashCode();
                if (this.DateD1 != null)
                    hashCode = hashCode * 59 + this.DateD1.GetHashCode();
                if (this.DeliveryDate != null)
                    hashCode = hashCode * 59 + this.DeliveryDate.GetHashCode();
                if (this.PriorityD1 != null)
                    hashCode = hashCode * 59 + this.PriorityD1.GetHashCode();
                if (this.DeliveryTime != null)
                    hashCode = hashCode * 59 + this.DeliveryTime.GetHashCode();
                if (this.DeliveryPostOffice != null)
                    hashCode = hashCode * 59 + this.DeliveryPostOffice.GetHashCode();
                if (this.DeliveryPostOfficeName != null)
                    hashCode = hashCode * 59 + this.DeliveryPostOfficeName.GetHashCode();
                if (this.DeliveryStatusText != null)
                    hashCode = hashCode * 59 + this.DeliveryStatusText.GetHashCode();
                if (this.ReturnDate != null)
                    hashCode = hashCode * 59 + this.ReturnDate.GetHashCode();
                if (this.ReturnPostOffice != null)
                    hashCode = hashCode * 59 + this.ReturnPostOffice.GetHashCode();
                if (this.ReturnPostOfficeName != null)
                    hashCode = hashCode * 59 + this.ReturnPostOfficeName.GetHashCode();
                if (this.ReturnStatusText != null)
                    hashCode = hashCode * 59 + this.ReturnStatusText.GetHashCode();
                if (this.CustomerNumberSender != null)
                    hashCode = hashCode * 59 + this.CustomerNumberSender.GetHashCode();
                if (this.IsoCountryTo != null)
                    hashCode = hashCode * 59 + this.IsoCountryTo.GetHashCode();
                if (this.NameCountryTo != null)
                    hashCode = hashCode * 59 + this.NameCountryTo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
