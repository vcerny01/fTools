/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// Bank
    /// </summary>
    [DataContract]
        public partial class Bank :  IEquatable<Bank>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Bank" /> class.
        /// </summary>
        /// <param name="prefixAccount">Prefix for account. / Predčíslí k účtu..</param>
        /// <param name="account">Account number. / Číslo účtu..</param>
        /// <param name="bank">Bank code. / Kód banky..</param>
        public Bank(string prefixAccount = default(string), string account = default(string), string bank = default(string))
        {
            this.PrefixAccount = prefixAccount;
            this.Account = account;
            this._Bank = bank;
        }
        
        /// <summary>
        /// Prefix for account. / Predčíslí k účtu.
        /// </summary>
        /// <value>Prefix for account. / Predčíslí k účtu.</value>
        [DataMember(Name="prefixAccount", EmitDefaultValue=false)]
        public string PrefixAccount { get; set; }

        /// <summary>
        /// Account number. / Číslo účtu.
        /// </summary>
        /// <value>Account number. / Číslo účtu.</value>
        [DataMember(Name="account", EmitDefaultValue=false)]
        public string Account { get; set; }

        /// <summary>
        /// Bank code. / Kód banky.
        /// </summary>
        /// <value>Bank code. / Kód banky.</value>
        [DataMember(Name="bank", EmitDefaultValue=false)]
        public string _Bank { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Bank {\n");
            sb.Append("  PrefixAccount: ").Append(PrefixAccount).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  _Bank: ").Append(_Bank).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Bank);
        }

        /// <summary>
        /// Returns true if Bank instances are equal
        /// </summary>
        /// <param name="input">Instance of Bank to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Bank input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PrefixAccount == input.PrefixAccount ||
                    (this.PrefixAccount != null &&
                    this.PrefixAccount.Equals(input.PrefixAccount))
                ) && 
                (
                    this.Account == input.Account ||
                    (this.Account != null &&
                    this.Account.Equals(input.Account))
                ) && 
                (
                    this._Bank == input._Bank ||
                    (this._Bank != null &&
                    this._Bank.Equals(input._Bank))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrefixAccount != null)
                    hashCode = hashCode * 59 + this.PrefixAccount.GetHashCode();
                if (this.Account != null)
                    hashCode = hashCode * 59 + this.Account.GetHashCode();
                if (this._Bank != null)
                    hashCode = hashCode * 59 + this._Bank.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
