/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// LetterPrintingRequest
    /// </summary>
    [DataContract]
        public partial class LetterPrintingRequest :  IEquatable<LetterPrintingRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LetterPrintingRequest" /> class.
        /// </summary>
        /// <param name="printingHeader">printingHeader (required).</param>
        /// <param name="printingData">printingData (required).</param>
        public LetterPrintingRequest(PrintingHeader printingHeader = default(PrintingHeader), PrintingData printingData = default(PrintingData))
        {
            // to ensure "printingHeader" is required (not null)
            if (printingHeader == null)
            {
                throw new InvalidDataException("printingHeader is a required property for LetterPrintingRequest and cannot be null");
            }
            else
            {
                this.PrintingHeader = printingHeader;
            }
            // to ensure "printingData" is required (not null)
            if (printingData == null)
            {
                throw new InvalidDataException("printingData is a required property for LetterPrintingRequest and cannot be null");
            }
            else
            {
                this.PrintingData = printingData;
            }
        }
        
        /// <summary>
        /// Gets or Sets PrintingHeader
        /// </summary>
        [DataMember(Name="printingHeader", EmitDefaultValue=false)]
        public PrintingHeader PrintingHeader { get; set; }

        /// <summary>
        /// Gets or Sets PrintingData
        /// </summary>
        [DataMember(Name="printingData", EmitDefaultValue=false)]
        public PrintingData PrintingData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LetterPrintingRequest {\n");
            sb.Append("  PrintingHeader: ").Append(PrintingHeader).Append("\n");
            sb.Append("  PrintingData: ").Append(PrintingData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LetterPrintingRequest);
        }

        /// <summary>
        /// Returns true if LetterPrintingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of LetterPrintingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LetterPrintingRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PrintingHeader == input.PrintingHeader ||
                    (this.PrintingHeader != null &&
                    this.PrintingHeader.Equals(input.PrintingHeader))
                ) && 
                (
                    this.PrintingData == input.PrintingData ||
                    (this.PrintingData != null &&
                    this.PrintingData.Equals(input.PrintingData))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PrintingHeader != null)
                    hashCode = hashCode * 59 + this.PrintingHeader.GetHashCode();
                if (this.PrintingData != null)
                    hashCode = hashCode * 59 + this.PrintingData.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
