/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// ParcelStatusDetail
    /// </summary>
    [DataContract]
        public partial class ParcelStatusDetail :  IEquatable<ParcelStatusDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelStatusDetail" /> class.
        /// </summary>
        /// <param name="idParcel">idParcel.</param>
        /// <param name="parcelType">parcelType.</param>
        /// <param name="weight">weight.</param>
        /// <param name="amount">amount.</param>
        /// <param name="currency">currency.</param>
        /// <param name="parcelsQuantity">parcelsQuantity.</param>
        /// <param name="depositTo">Date format ISO8601. / Datum ve formátu ISO8601..</param>
        /// <param name="timeDeposit">Deposit time. / Úložní doba..</param>
        /// <param name="countryOfOrigin">Country of origin. / Země původu..</param>
        /// <param name="countryOfDestination">Country of destination. / Země určení..</param>
        /// <param name="parcelStatuses">parcelStatuses.</param>
        public ParcelStatusDetail(string idParcel = default(string), string parcelType = default(string), string weight = default(string), double? amount = default(double?), string currency = default(string), int? parcelsQuantity = default(int?), DateTime? depositTo = default(DateTime?), int? timeDeposit = default(int?), string countryOfOrigin = default(string), string countryOfDestination = default(string), List<ParcelStatus> parcelStatuses = default(List<ParcelStatus>))
        {
            this.IdParcel = idParcel;
            this.ParcelType = parcelType;
            this.Weight = weight;
            this.Amount = amount;
            this.Currency = currency;
            this.ParcelsQuantity = parcelsQuantity;
            this.DepositTo = depositTo;
            this.TimeDeposit = timeDeposit;
            this.CountryOfOrigin = countryOfOrigin;
            this.CountryOfDestination = countryOfDestination;
            this.ParcelStatuses = parcelStatuses;
        }
        
        /// <summary>
        /// Gets or Sets IdParcel
        /// </summary>
        [DataMember(Name="idParcel", EmitDefaultValue=false)]
        public string IdParcel { get; set; }

        /// <summary>
        /// Gets or Sets ParcelType
        /// </summary>
        [DataMember(Name="parcelType", EmitDefaultValue=false)]
        public string ParcelType { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public string Weight { get; set; }

        /// <summary>
        /// Gets or Sets Amount
        /// </summary>
        [DataMember(Name="amount", EmitDefaultValue=false)]
        public double? Amount { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets ParcelsQuantity
        /// </summary>
        [DataMember(Name="parcelsQuantity", EmitDefaultValue=false)]
        public int? ParcelsQuantity { get; set; }

        /// <summary>
        /// Date format ISO8601. / Datum ve formátu ISO8601.
        /// </summary>
        /// <value>Date format ISO8601. / Datum ve formátu ISO8601.</value>
        [DataMember(Name="depositTo", EmitDefaultValue=false)]
        [JsonConverter(typeof(SwaggerDateConverter))]
        public DateTime? DepositTo { get; set; }

        /// <summary>
        /// Deposit time. / Úložní doba.
        /// </summary>
        /// <value>Deposit time. / Úložní doba.</value>
        [DataMember(Name="timeDeposit", EmitDefaultValue=false)]
        public int? TimeDeposit { get; set; }

        /// <summary>
        /// Country of origin. / Země původu.
        /// </summary>
        /// <value>Country of origin. / Země původu.</value>
        [DataMember(Name="countryOfOrigin", EmitDefaultValue=false)]
        public string CountryOfOrigin { get; set; }

        /// <summary>
        /// Country of destination. / Země určení.
        /// </summary>
        /// <value>Country of destination. / Země určení.</value>
        [DataMember(Name="countryOfDestination", EmitDefaultValue=false)]
        public string CountryOfDestination { get; set; }

        /// <summary>
        /// Gets or Sets ParcelStatuses
        /// </summary>
        [DataMember(Name="parcelStatuses", EmitDefaultValue=false)]
        public List<ParcelStatus> ParcelStatuses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParcelStatusDetail {\n");
            sb.Append("  IdParcel: ").Append(IdParcel).Append("\n");
            sb.Append("  ParcelType: ").Append(ParcelType).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Amount: ").Append(Amount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  ParcelsQuantity: ").Append(ParcelsQuantity).Append("\n");
            sb.Append("  DepositTo: ").Append(DepositTo).Append("\n");
            sb.Append("  TimeDeposit: ").Append(TimeDeposit).Append("\n");
            sb.Append("  CountryOfOrigin: ").Append(CountryOfOrigin).Append("\n");
            sb.Append("  CountryOfDestination: ").Append(CountryOfDestination).Append("\n");
            sb.Append("  ParcelStatuses: ").Append(ParcelStatuses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelStatusDetail);
        }

        /// <summary>
        /// Returns true if ParcelStatusDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelStatusDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelStatusDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IdParcel == input.IdParcel ||
                    (this.IdParcel != null &&
                    this.IdParcel.Equals(input.IdParcel))
                ) && 
                (
                    this.ParcelType == input.ParcelType ||
                    (this.ParcelType != null &&
                    this.ParcelType.Equals(input.ParcelType))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.Amount == input.Amount ||
                    (this.Amount != null &&
                    this.Amount.Equals(input.Amount))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.ParcelsQuantity == input.ParcelsQuantity ||
                    (this.ParcelsQuantity != null &&
                    this.ParcelsQuantity.Equals(input.ParcelsQuantity))
                ) && 
                (
                    this.DepositTo == input.DepositTo ||
                    (this.DepositTo != null &&
                    this.DepositTo.Equals(input.DepositTo))
                ) && 
                (
                    this.TimeDeposit == input.TimeDeposit ||
                    (this.TimeDeposit != null &&
                    this.TimeDeposit.Equals(input.TimeDeposit))
                ) && 
                (
                    this.CountryOfOrigin == input.CountryOfOrigin ||
                    (this.CountryOfOrigin != null &&
                    this.CountryOfOrigin.Equals(input.CountryOfOrigin))
                ) && 
                (
                    this.CountryOfDestination == input.CountryOfDestination ||
                    (this.CountryOfDestination != null &&
                    this.CountryOfDestination.Equals(input.CountryOfDestination))
                ) && 
                (
                    this.ParcelStatuses == input.ParcelStatuses ||
                    this.ParcelStatuses != null &&
                    input.ParcelStatuses != null &&
                    this.ParcelStatuses.SequenceEqual(input.ParcelStatuses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdParcel != null)
                    hashCode = hashCode * 59 + this.IdParcel.GetHashCode();
                if (this.ParcelType != null)
                    hashCode = hashCode * 59 + this.ParcelType.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Amount != null)
                    hashCode = hashCode * 59 + this.Amount.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.ParcelsQuantity != null)
                    hashCode = hashCode * 59 + this.ParcelsQuantity.GetHashCode();
                if (this.DepositTo != null)
                    hashCode = hashCode * 59 + this.DepositTo.GetHashCode();
                if (this.TimeDeposit != null)
                    hashCode = hashCode * 59 + this.TimeDeposit.GetHashCode();
                if (this.CountryOfOrigin != null)
                    hashCode = hashCode * 59 + this.CountryOfOrigin.GetHashCode();
                if (this.CountryOfDestination != null)
                    hashCode = hashCode * 59 + this.CountryOfDestination.GetHashCode();
                if (this.ParcelStatuses != null)
                    hashCode = hashCode * 59 + this.ParcelStatuses.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
