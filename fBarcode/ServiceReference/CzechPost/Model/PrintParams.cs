/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// PrintParams
    /// </summary>
    [DataContract]
        public partial class PrintParams :  IEquatable<PrintParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PrintParams" /> class.
        /// </summary>
        /// <param name="idForm">idForm.</param>
        /// <param name="shiftHorizontal">shiftHorizontal.</param>
        /// <param name="shiftVertical">shiftVertical.</param>
        public PrintParams(int? idForm = default(int?), decimal? shiftHorizontal = default(decimal?), decimal? shiftVertical = default(decimal?))
        {
            this.IdForm = idForm;
            this.ShiftHorizontal = shiftHorizontal;
            this.ShiftVertical = shiftVertical;
        }
        
        /// <summary>
        /// Gets or Sets IdForm
        /// </summary>
        [DataMember(Name="idForm", EmitDefaultValue=false)]
        public int? IdForm { get; set; }

        /// <summary>
        /// Gets or Sets ShiftHorizontal
        /// </summary>
        [DataMember(Name="shiftHorizontal", EmitDefaultValue=false)]
        public decimal? ShiftHorizontal { get; set; }

        /// <summary>
        /// Gets or Sets ShiftVertical
        /// </summary>
        [DataMember(Name="shiftVertical", EmitDefaultValue=false)]
        public decimal? ShiftVertical { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PrintParams {\n");
            sb.Append("  IdForm: ").Append(IdForm).Append("\n");
            sb.Append("  ShiftHorizontal: ").Append(ShiftHorizontal).Append("\n");
            sb.Append("  ShiftVertical: ").Append(ShiftVertical).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PrintParams);
        }

        /// <summary>
        /// Returns true if PrintParams instances are equal
        /// </summary>
        /// <param name="input">Instance of PrintParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PrintParams input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IdForm == input.IdForm ||
                    (this.IdForm != null &&
                    this.IdForm.Equals(input.IdForm))
                ) && 
                (
                    this.ShiftHorizontal == input.ShiftHorizontal ||
                    (this.ShiftHorizontal != null &&
                    this.ShiftHorizontal.Equals(input.ShiftHorizontal))
                ) && 
                (
                    this.ShiftVertical == input.ShiftVertical ||
                    (this.ShiftVertical != null &&
                    this.ShiftVertical.Equals(input.ShiftVertical))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdForm != null)
                    hashCode = hashCode * 59 + this.IdForm.GetHashCode();
                if (this.ShiftHorizontal != null)
                    hashCode = hashCode * 59 + this.ShiftHorizontal.GetHashCode();
                if (this.ShiftVertical != null)
                    hashCode = hashCode * 59 + this.ShiftVertical.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
