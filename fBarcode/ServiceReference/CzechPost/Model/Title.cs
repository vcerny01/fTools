/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// Title
    /// </summary>
    [DataContract]
        public partial class Title :  IEquatable<Title>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Title" /> class.
        /// </summary>
        /// <param name="recordID">Internal destination of the recipient./ Interní označení adresáta..</param>
        /// <param name="firstName">First name. (maxLength &#x3D; 50) / Jméno..</param>
        /// <param name="surname">Surname. (max.length &#x3D; 50) / Příjmení..</param>
        /// <param name="company">Company name. (max.length &#x3D; 50) / Název společnosti..</param>
        /// <param name="aditionAddress">Aditional information. (max.length &#x3D; 50) / Doplňujici informace k názvu adresáta..</param>
        /// <param name="subject">Recipient&#x27;s type. (max.length &#x3D; 2) / Typ adresáta..</param>
        /// <param name="ic">CIN - company identification number. (max.9999999999) / IČO - identifikační číslo ekonomických subjektů..</param>
        /// <param name="dic">VATIN - value added tax identification number. (max.length &#x3D; 12) / DIC - daňové identifikační Číslo..</param>
        /// <param name="specification">Specification, eg. birthdate. (max.length &#x3D; 15)/ Specifikace, např. datum narození..</param>
        public Title(string recordID = default(string), string firstName = default(string), string surname = default(string), string company = default(string), string aditionAddress = default(string), string subject = default(string), int? ic = default(int?), string dic = default(string), string specification = default(string))
        {
            this.RecordID = recordID;
            this.FirstName = firstName;
            this.Surname = surname;
            this.Company = company;
            this.AditionAddress = aditionAddress;
            this.Subject = subject;
            this.Ic = ic;
            this.Dic = dic;
            this.Specification = specification;
        }
        
        /// <summary>
        /// Internal destination of the recipient./ Interní označení adresáta.
        /// </summary>
        /// <value>Internal destination of the recipient./ Interní označení adresáta.</value>
        [DataMember(Name="recordID", EmitDefaultValue=false)]
        public string RecordID { get; set; }

        /// <summary>
        /// First name. (maxLength &#x3D; 50) / Jméno.
        /// </summary>
        /// <value>First name. (maxLength &#x3D; 50) / Jméno.</value>
        [DataMember(Name="firstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Surname. (max.length &#x3D; 50) / Příjmení.
        /// </summary>
        /// <value>Surname. (max.length &#x3D; 50) / Příjmení.</value>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// Company name. (max.length &#x3D; 50) / Název společnosti.
        /// </summary>
        /// <value>Company name. (max.length &#x3D; 50) / Název společnosti.</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// Aditional information. (max.length &#x3D; 50) / Doplňujici informace k názvu adresáta.
        /// </summary>
        /// <value>Aditional information. (max.length &#x3D; 50) / Doplňujici informace k názvu adresáta.</value>
        [DataMember(Name="aditionAddress", EmitDefaultValue=false)]
        public string AditionAddress { get; set; }

        /// <summary>
        /// Recipient&#x27;s type. (max.length &#x3D; 2) / Typ adresáta.
        /// </summary>
        /// <value>Recipient&#x27;s type. (max.length &#x3D; 2) / Typ adresáta.</value>
        [DataMember(Name="subject", EmitDefaultValue=false)]
        public string Subject { get; set; }

        /// <summary>
        /// CIN - company identification number. (max.9999999999) / IČO - identifikační číslo ekonomických subjektů.
        /// </summary>
        /// <value>CIN - company identification number. (max.9999999999) / IČO - identifikační číslo ekonomických subjektů.</value>
        [DataMember(Name="ic", EmitDefaultValue=false)]
        public int? Ic { get; set; }

        /// <summary>
        /// VATIN - value added tax identification number. (max.length &#x3D; 12) / DIC - daňové identifikační Číslo.
        /// </summary>
        /// <value>VATIN - value added tax identification number. (max.length &#x3D; 12) / DIC - daňové identifikační Číslo.</value>
        [DataMember(Name="dic", EmitDefaultValue=false)]
        public string Dic { get; set; }

        /// <summary>
        /// Specification, eg. birthdate. (max.length &#x3D; 15)/ Specifikace, např. datum narození.
        /// </summary>
        /// <value>Specification, eg. birthdate. (max.length &#x3D; 15)/ Specifikace, např. datum narození.</value>
        [DataMember(Name="specification", EmitDefaultValue=false)]
        public string Specification { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Title {\n");
            sb.Append("  RecordID: ").Append(RecordID).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  AditionAddress: ").Append(AditionAddress).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  Ic: ").Append(Ic).Append("\n");
            sb.Append("  Dic: ").Append(Dic).Append("\n");
            sb.Append("  Specification: ").Append(Specification).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Title);
        }

        /// <summary>
        /// Returns true if Title instances are equal
        /// </summary>
        /// <param name="input">Instance of Title to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Title input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecordID == input.RecordID ||
                    (this.RecordID != null &&
                    this.RecordID.Equals(input.RecordID))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.AditionAddress == input.AditionAddress ||
                    (this.AditionAddress != null &&
                    this.AditionAddress.Equals(input.AditionAddress))
                ) && 
                (
                    this.Subject == input.Subject ||
                    (this.Subject != null &&
                    this.Subject.Equals(input.Subject))
                ) && 
                (
                    this.Ic == input.Ic ||
                    (this.Ic != null &&
                    this.Ic.Equals(input.Ic))
                ) && 
                (
                    this.Dic == input.Dic ||
                    (this.Dic != null &&
                    this.Dic.Equals(input.Dic))
                ) && 
                (
                    this.Specification == input.Specification ||
                    (this.Specification != null &&
                    this.Specification.Equals(input.Specification))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecordID != null)
                    hashCode = hashCode * 59 + this.RecordID.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.AditionAddress != null)
                    hashCode = hashCode * 59 + this.AditionAddress.GetHashCode();
                if (this.Subject != null)
                    hashCode = hashCode * 59 + this.Subject.GetHashCode();
                if (this.Ic != null)
                    hashCode = hashCode * 59 + this.Ic.GetHashCode();
                if (this.Dic != null)
                    hashCode = hashCode * 59 + this.Dic.GetHashCode();
                if (this.Specification != null)
                    hashCode = hashCode * 59 + this.Specification.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
