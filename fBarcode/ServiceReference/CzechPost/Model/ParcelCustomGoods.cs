/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// ParcelCustomGoods
    /// </summary>
    [DataContract]
        public partial class ParcelCustomGoods :  IEquatable<ParcelCustomGoods>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelCustomGoods" /> class.
        /// </summary>
        /// <param name="sequence">sequence (required).</param>
        /// <param name="customCont">Goods description. / Popis zboží. (required).</param>
        /// <param name="quantity">quantity (required).</param>
        /// <param name="weight">weight (required).</param>
        /// <param name="customVal">Custom value. / Celni hodnota. (required).</param>
        /// <param name="hsCode">HS code. / HS kód. (required).</param>
        /// <param name="iso">Country of origin of the goods. / Země původu zboží. (required).</param>
        public ParcelCustomGoods(int? sequence = default(int?), string customCont = default(string), int? quantity = default(int?), string weight = default(string), double? customVal = default(double?), string hsCode = default(string), string iso = default(string))
        {
            // to ensure "sequence" is required (not null)
            if (sequence == null)
            {
                throw new InvalidDataException("sequence is a required property for ParcelCustomGoods and cannot be null");
            }
            else
            {
                this.Sequence = sequence;
            }
            // to ensure "customCont" is required (not null)
            if (customCont == null)
            {
                throw new InvalidDataException("customCont is a required property for ParcelCustomGoods and cannot be null");
            }
            else
            {
                this.CustomCont = customCont;
            }
            // to ensure "quantity" is required (not null)
            if (quantity == null)
            {
                throw new InvalidDataException("quantity is a required property for ParcelCustomGoods and cannot be null");
            }
            else
            {
                this.Quantity = quantity;
            }
            // to ensure "weight" is required (not null)
            if (weight == null)
            {
                throw new InvalidDataException("weight is a required property for ParcelCustomGoods and cannot be null");
            }
            else
            {
                this.Weight = weight;
            }
            // to ensure "customVal" is required (not null)
            if (customVal == null)
            {
                throw new InvalidDataException("customVal is a required property for ParcelCustomGoods and cannot be null");
            }
            else
            {
                this.CustomVal = customVal;
            }
            // to ensure "hsCode" is required (not null)
            if (hsCode == null)
            {
                throw new InvalidDataException("hsCode is a required property for ParcelCustomGoods and cannot be null");
            }
            else
            {
                this.HsCode = hsCode;
            }
            // to ensure "iso" is required (not null)
            if (iso == null)
            {
                throw new InvalidDataException("iso is a required property for ParcelCustomGoods and cannot be null");
            }
            else
            {
                this.Iso = iso;
            }
        }
        
        /// <summary>
        /// Gets or Sets Sequence
        /// </summary>
        [DataMember(Name="sequence", EmitDefaultValue=false)]
        public int? Sequence { get; set; }

        /// <summary>
        /// Goods description. / Popis zboží.
        /// </summary>
        /// <value>Goods description. / Popis zboží.</value>
        [DataMember(Name="customCont", EmitDefaultValue=false)]
        public string CustomCont { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public int? Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public string Weight { get; set; }

        /// <summary>
        /// Custom value. / Celni hodnota.
        /// </summary>
        /// <value>Custom value. / Celni hodnota.</value>
        [DataMember(Name="customVal", EmitDefaultValue=false)]
        public double? CustomVal { get; set; }

        /// <summary>
        /// HS code. / HS kód.
        /// </summary>
        /// <value>HS code. / HS kód.</value>
        [DataMember(Name="hsCode", EmitDefaultValue=false)]
        public string HsCode { get; set; }

        /// <summary>
        /// Country of origin of the goods. / Země původu zboží.
        /// </summary>
        /// <value>Country of origin of the goods. / Země původu zboží.</value>
        [DataMember(Name="iso", EmitDefaultValue=false)]
        public string Iso { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParcelCustomGoods {\n");
            sb.Append("  Sequence: ").Append(Sequence).Append("\n");
            sb.Append("  CustomCont: ").Append(CustomCont).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  CustomVal: ").Append(CustomVal).Append("\n");
            sb.Append("  HsCode: ").Append(HsCode).Append("\n");
            sb.Append("  Iso: ").Append(Iso).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelCustomGoods);
        }

        /// <summary>
        /// Returns true if ParcelCustomGoods instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelCustomGoods to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelCustomGoods input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Sequence == input.Sequence ||
                    (this.Sequence != null &&
                    this.Sequence.Equals(input.Sequence))
                ) && 
                (
                    this.CustomCont == input.CustomCont ||
                    (this.CustomCont != null &&
                    this.CustomCont.Equals(input.CustomCont))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    (this.Quantity != null &&
                    this.Quantity.Equals(input.Quantity))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.CustomVal == input.CustomVal ||
                    (this.CustomVal != null &&
                    this.CustomVal.Equals(input.CustomVal))
                ) && 
                (
                    this.HsCode == input.HsCode ||
                    (this.HsCode != null &&
                    this.HsCode.Equals(input.HsCode))
                ) && 
                (
                    this.Iso == input.Iso ||
                    (this.Iso != null &&
                    this.Iso.Equals(input.Iso))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Sequence != null)
                    hashCode = hashCode * 59 + this.Sequence.GetHashCode();
                if (this.CustomCont != null)
                    hashCode = hashCode * 59 + this.CustomCont.GetHashCode();
                if (this.Quantity != null)
                    hashCode = hashCode * 59 + this.Quantity.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.CustomVal != null)
                    hashCode = hashCode * 59 + this.CustomVal.GetHashCode();
                if (this.HsCode != null)
                    hashCode = hashCode * 59 + this.HsCode.GetHashCode();
                if (this.Iso != null)
                    hashCode = hashCode * 59 + this.Iso.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
