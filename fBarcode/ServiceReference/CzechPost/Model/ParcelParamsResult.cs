/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// ParcelParamsResult
    /// </summary>
    [DataContract]
        public partial class ParcelParamsResult :  IEquatable<ParcelParamsResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelParamsResult" /> class.
        /// </summary>
        /// <param name="recordNumber">recordNumber (required).</param>
        /// <param name="parcelCode">parcelCode (required).</param>
        /// <param name="parcelStateResponse">parcelStateResponse (required).</param>
        public ParcelParamsResult(string recordNumber = default(string), string parcelCode = default(string), ParcelStateResponse parcelStateResponse = default(ParcelStateResponse))
        {
            // to ensure "recordNumber" is required (not null)
            if (recordNumber == null)
            {
                throw new InvalidDataException("recordNumber is a required property for ParcelParamsResult and cannot be null");
            }
            else
            {
                this.RecordNumber = recordNumber;
            }
            // to ensure "parcelCode" is required (not null)
            if (parcelCode == null)
            {
                throw new InvalidDataException("parcelCode is a required property for ParcelParamsResult and cannot be null");
            }
            else
            {
                this.ParcelCode = parcelCode;
            }
            // to ensure "parcelStateResponse" is required (not null)
            if (parcelStateResponse == null)
            {
                throw new InvalidDataException("parcelStateResponse is a required property for ParcelParamsResult and cannot be null");
            }
            else
            {
                this.ParcelStateResponse = parcelStateResponse;
            }
        }
        
        /// <summary>
        /// Gets or Sets RecordNumber
        /// </summary>
        [DataMember(Name="recordNumber", EmitDefaultValue=false)]
        public string RecordNumber { get; set; }

        /// <summary>
        /// Gets or Sets ParcelCode
        /// </summary>
        [DataMember(Name="parcelCode", EmitDefaultValue=false)]
        public string ParcelCode { get; set; }

        /// <summary>
        /// Gets or Sets ParcelStateResponse
        /// </summary>
        [DataMember(Name="parcelStateResponse", EmitDefaultValue=false)]
        public ParcelStateResponse ParcelStateResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParcelParamsResult {\n");
            sb.Append("  RecordNumber: ").Append(RecordNumber).Append("\n");
            sb.Append("  ParcelCode: ").Append(ParcelCode).Append("\n");
            sb.Append("  ParcelStateResponse: ").Append(ParcelStateResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelParamsResult);
        }

        /// <summary>
        /// Returns true if ParcelParamsResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelParamsResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelParamsResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RecordNumber == input.RecordNumber ||
                    (this.RecordNumber != null &&
                    this.RecordNumber.Equals(input.RecordNumber))
                ) && 
                (
                    this.ParcelCode == input.ParcelCode ||
                    (this.ParcelCode != null &&
                    this.ParcelCode.Equals(input.ParcelCode))
                ) && 
                (
                    this.ParcelStateResponse == input.ParcelStateResponse ||
                    (this.ParcelStateResponse != null &&
                    this.ParcelStateResponse.Equals(input.ParcelStateResponse))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RecordNumber != null)
                    hashCode = hashCode * 59 + this.RecordNumber.GetHashCode();
                if (this.ParcelCode != null)
                    hashCode = hashCode * 59 + this.ParcelCode.GetHashCode();
                if (this.ParcelStateResponse != null)
                    hashCode = hashCode * 59 + this.ParcelStateResponse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
