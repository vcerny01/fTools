/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// QualityData
    /// </summary>
    [DataContract]
        public partial class QualityData :  IEquatable<QualityData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QualityData" /> class.
        /// </summary>
        /// <param name="customerID">customerID.</param>
        /// <param name="idContractHeadquarters">idContractHeadquarters.</param>
        /// <param name="idContractBranch">idContractBranch.</param>
        /// <param name="nameHeadquarters">Name of headquarters. / Název sídla..</param>
        /// <param name="parcelCode">parcelCode.</param>
        /// <param name="prefix">prefix.</param>
        /// <param name="productType">Type of the product. / Typ produktu..</param>
        /// <param name="submissionDate">submissionDate.</param>
        /// <param name="submissionPostCode">submissionPostCode.</param>
        /// <param name="submissionPostOfficeName">Name of the post office where submissed. / Název pobočky podání..</param>
        /// <param name="deliveryPostCode">deliveryPostCode.</param>
        /// <param name="deliveryPostOfficeName">Name of the post office where delivered. / Název pobočky dodání..</param>
        /// <param name="addressAtSubmission">Address at submission. / Adresa na podání..</param>
        /// <param name="categoryError">Category error. Values:   - Zadna_chyba - without errors,   - Mala_chyba - small error,   - Stredni_chyba - medium error,   - Zavazna_chyba - big error. / Kategorie chyba. Určuje závažnost chyby v adrese. Nabývá hodnot: - Zadna_chyba, - Mala_chyba, - Stredni_chyba, - Zavazna_chyba. .</param>
        /// <param name="flagErrMdm">Flag of error of MDM. Values: - vycistena - cleared, - nevycistena - uncleared. / Flag chyby MDM. Definuje, zda adresa byla vyčištěna nebo ne. Nabývá hodnot: - vycistena, - nevycistena .</param>
        /// <param name="clearedCAD">Determines the quality of the address data from the perspective of the CAD system. Values:   - CAD_bez_zmeny - CAD without changes,   - CAD_zmena - CAD with changes,   - Data_podani_bez_zmeny - Submit datas without changes,   - Data_podani_zmena - Submit datas with changes,   - Neurceno - undetermined. / Určuje kvalitu adresních dat z pohledu systému CAD. Nabývá hodnot:   - CAD_bez_zmeny,   - CAD_zmena,   - Data_podani_bez_zmeny,   - Data_podani_zmena,   - Neurceno. .</param>
        /// <param name="adrMatchMdm">Determines the quality of the address data from the perspective of the MDM system. Values: - NOMATCH – ID_DDM was at the entrance, - MATCH0 – the most accurate address, - MATCH1 – less exact address, - MATCH3 - etc.., - NOT_FOUND – address not found) / Určuje kvalitu adresních dat z pohledu MDM a aplikaci pravidla dohledání adresy. Nabývá hodnot: - NOMATCH – bylo ID DDM na vstupu, - MATCH0 – nejpřesnější adresa, - MATCH1 – méně přesná, - MATCH3 atd.., - NOT_FOUND – adresa nenalezena) .</param>
        /// <param name="replacementCode">Replacement code. / Náhradní kód..</param>
        /// <param name="addressLocation">addressLocation.</param>
        /// <param name="emailAddressee">Email address of addressee. / Email adresáta..</param>
        public QualityData(string customerID = default(string), string idContractHeadquarters = default(string), string idContractBranch = default(string), string nameHeadquarters = default(string), string parcelCode = default(string), string prefix = default(string), string productType = default(string), DateTime? submissionDate = default(DateTime?), string submissionPostCode = default(string), string submissionPostOfficeName = default(string), string deliveryPostCode = default(string), string deliveryPostOfficeName = default(string), string addressAtSubmission = default(string), string categoryError = default(string), string flagErrMdm = default(string), string clearedCAD = default(string), string adrMatchMdm = default(string), string replacementCode = default(string), AddressLocation addressLocation = default(AddressLocation), string emailAddressee = default(string))
        {
            this.CustomerID = customerID;
            this.IdContractHeadquarters = idContractHeadquarters;
            this.IdContractBranch = idContractBranch;
            this.NameHeadquarters = nameHeadquarters;
            this.ParcelCode = parcelCode;
            this.Prefix = prefix;
            this.ProductType = productType;
            this.SubmissionDate = submissionDate;
            this.SubmissionPostCode = submissionPostCode;
            this.SubmissionPostOfficeName = submissionPostOfficeName;
            this.DeliveryPostCode = deliveryPostCode;
            this.DeliveryPostOfficeName = deliveryPostOfficeName;
            this.AddressAtSubmission = addressAtSubmission;
            this.CategoryError = categoryError;
            this.FlagErrMdm = flagErrMdm;
            this.ClearedCAD = clearedCAD;
            this.AdrMatchMdm = adrMatchMdm;
            this.ReplacementCode = replacementCode;
            this.AddressLocation = addressLocation;
            this.EmailAddressee = emailAddressee;
        }
        
        /// <summary>
        /// Gets or Sets CustomerID
        /// </summary>
        [DataMember(Name="customerID", EmitDefaultValue=false)]
        public string CustomerID { get; set; }

        /// <summary>
        /// Gets or Sets IdContractHeadquarters
        /// </summary>
        [DataMember(Name="idContractHeadquarters", EmitDefaultValue=false)]
        public string IdContractHeadquarters { get; set; }

        /// <summary>
        /// Gets or Sets IdContractBranch
        /// </summary>
        [DataMember(Name="idContractBranch", EmitDefaultValue=false)]
        public string IdContractBranch { get; set; }

        /// <summary>
        /// Name of headquarters. / Název sídla.
        /// </summary>
        /// <value>Name of headquarters. / Název sídla.</value>
        [DataMember(Name="nameHeadquarters", EmitDefaultValue=false)]
        public string NameHeadquarters { get; set; }

        /// <summary>
        /// Gets or Sets ParcelCode
        /// </summary>
        [DataMember(Name="parcelCode", EmitDefaultValue=false)]
        public string ParcelCode { get; set; }

        /// <summary>
        /// Gets or Sets Prefix
        /// </summary>
        [DataMember(Name="prefix", EmitDefaultValue=false)]
        public string Prefix { get; set; }

        /// <summary>
        /// Type of the product. / Typ produktu.
        /// </summary>
        /// <value>Type of the product. / Typ produktu.</value>
        [DataMember(Name="productType", EmitDefaultValue=false)]
        public string ProductType { get; set; }

        /// <summary>
        /// Gets or Sets SubmissionDate
        /// </summary>
        [DataMember(Name="submissionDate", EmitDefaultValue=false)]
        public DateTime? SubmissionDate { get; set; }

        /// <summary>
        /// Gets or Sets SubmissionPostCode
        /// </summary>
        [DataMember(Name="submissionPostCode", EmitDefaultValue=false)]
        public string SubmissionPostCode { get; set; }

        /// <summary>
        /// Name of the post office where submissed. / Název pobočky podání.
        /// </summary>
        /// <value>Name of the post office where submissed. / Název pobočky podání.</value>
        [DataMember(Name="submissionPostOfficeName", EmitDefaultValue=false)]
        public string SubmissionPostOfficeName { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryPostCode
        /// </summary>
        [DataMember(Name="deliveryPostCode", EmitDefaultValue=false)]
        public string DeliveryPostCode { get; set; }

        /// <summary>
        /// Name of the post office where delivered. / Název pobočky dodání.
        /// </summary>
        /// <value>Name of the post office where delivered. / Název pobočky dodání.</value>
        [DataMember(Name="deliveryPostOfficeName", EmitDefaultValue=false)]
        public string DeliveryPostOfficeName { get; set; }

        /// <summary>
        /// Address at submission. / Adresa na podání.
        /// </summary>
        /// <value>Address at submission. / Adresa na podání.</value>
        [DataMember(Name="addressAtSubmission", EmitDefaultValue=false)]
        public string AddressAtSubmission { get; set; }

        /// <summary>
        /// Category error. Values:   - Zadna_chyba - without errors,   - Mala_chyba - small error,   - Stredni_chyba - medium error,   - Zavazna_chyba - big error. / Kategorie chyba. Určuje závažnost chyby v adrese. Nabývá hodnot: - Zadna_chyba, - Mala_chyba, - Stredni_chyba, - Zavazna_chyba. 
        /// </summary>
        /// <value>Category error. Values:   - Zadna_chyba - without errors,   - Mala_chyba - small error,   - Stredni_chyba - medium error,   - Zavazna_chyba - big error. / Kategorie chyba. Určuje závažnost chyby v adrese. Nabývá hodnot: - Zadna_chyba, - Mala_chyba, - Stredni_chyba, - Zavazna_chyba. </value>
        [DataMember(Name="categoryError", EmitDefaultValue=false)]
        public string CategoryError { get; set; }

        /// <summary>
        /// Flag of error of MDM. Values: - vycistena - cleared, - nevycistena - uncleared. / Flag chyby MDM. Definuje, zda adresa byla vyčištěna nebo ne. Nabývá hodnot: - vycistena, - nevycistena 
        /// </summary>
        /// <value>Flag of error of MDM. Values: - vycistena - cleared, - nevycistena - uncleared. / Flag chyby MDM. Definuje, zda adresa byla vyčištěna nebo ne. Nabývá hodnot: - vycistena, - nevycistena </value>
        [DataMember(Name="flagErrMdm", EmitDefaultValue=false)]
        public string FlagErrMdm { get; set; }

        /// <summary>
        /// Determines the quality of the address data from the perspective of the CAD system. Values:   - CAD_bez_zmeny - CAD without changes,   - CAD_zmena - CAD with changes,   - Data_podani_bez_zmeny - Submit datas without changes,   - Data_podani_zmena - Submit datas with changes,   - Neurceno - undetermined. / Určuje kvalitu adresních dat z pohledu systému CAD. Nabývá hodnot:   - CAD_bez_zmeny,   - CAD_zmena,   - Data_podani_bez_zmeny,   - Data_podani_zmena,   - Neurceno. 
        /// </summary>
        /// <value>Determines the quality of the address data from the perspective of the CAD system. Values:   - CAD_bez_zmeny - CAD without changes,   - CAD_zmena - CAD with changes,   - Data_podani_bez_zmeny - Submit datas without changes,   - Data_podani_zmena - Submit datas with changes,   - Neurceno - undetermined. / Určuje kvalitu adresních dat z pohledu systému CAD. Nabývá hodnot:   - CAD_bez_zmeny,   - CAD_zmena,   - Data_podani_bez_zmeny,   - Data_podani_zmena,   - Neurceno. </value>
        [DataMember(Name="clearedCAD", EmitDefaultValue=false)]
        public string ClearedCAD { get; set; }

        /// <summary>
        /// Determines the quality of the address data from the perspective of the MDM system. Values: - NOMATCH – ID_DDM was at the entrance, - MATCH0 – the most accurate address, - MATCH1 – less exact address, - MATCH3 - etc.., - NOT_FOUND – address not found) / Určuje kvalitu adresních dat z pohledu MDM a aplikaci pravidla dohledání adresy. Nabývá hodnot: - NOMATCH – bylo ID DDM na vstupu, - MATCH0 – nejpřesnější adresa, - MATCH1 – méně přesná, - MATCH3 atd.., - NOT_FOUND – adresa nenalezena) 
        /// </summary>
        /// <value>Determines the quality of the address data from the perspective of the MDM system. Values: - NOMATCH – ID_DDM was at the entrance, - MATCH0 – the most accurate address, - MATCH1 – less exact address, - MATCH3 - etc.., - NOT_FOUND – address not found) / Určuje kvalitu adresních dat z pohledu MDM a aplikaci pravidla dohledání adresy. Nabývá hodnot: - NOMATCH – bylo ID DDM na vstupu, - MATCH0 – nejpřesnější adresa, - MATCH1 – méně přesná, - MATCH3 atd.., - NOT_FOUND – adresa nenalezena) </value>
        [DataMember(Name="adrMatchMdm", EmitDefaultValue=false)]
        public string AdrMatchMdm { get; set; }

        /// <summary>
        /// Replacement code. / Náhradní kód.
        /// </summary>
        /// <value>Replacement code. / Náhradní kód.</value>
        [DataMember(Name="replacementCode", EmitDefaultValue=false)]
        public string ReplacementCode { get; set; }

        /// <summary>
        /// Gets or Sets AddressLocation
        /// </summary>
        [DataMember(Name="addressLocation", EmitDefaultValue=false)]
        public AddressLocation AddressLocation { get; set; }

        /// <summary>
        /// Email address of addressee. / Email adresáta.
        /// </summary>
        /// <value>Email address of addressee. / Email adresáta.</value>
        [DataMember(Name="emailAddressee", EmitDefaultValue=false)]
        public string EmailAddressee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QualityData {\n");
            sb.Append("  CustomerID: ").Append(CustomerID).Append("\n");
            sb.Append("  IdContractHeadquarters: ").Append(IdContractHeadquarters).Append("\n");
            sb.Append("  IdContractBranch: ").Append(IdContractBranch).Append("\n");
            sb.Append("  NameHeadquarters: ").Append(NameHeadquarters).Append("\n");
            sb.Append("  ParcelCode: ").Append(ParcelCode).Append("\n");
            sb.Append("  Prefix: ").Append(Prefix).Append("\n");
            sb.Append("  ProductType: ").Append(ProductType).Append("\n");
            sb.Append("  SubmissionDate: ").Append(SubmissionDate).Append("\n");
            sb.Append("  SubmissionPostCode: ").Append(SubmissionPostCode).Append("\n");
            sb.Append("  SubmissionPostOfficeName: ").Append(SubmissionPostOfficeName).Append("\n");
            sb.Append("  DeliveryPostCode: ").Append(DeliveryPostCode).Append("\n");
            sb.Append("  DeliveryPostOfficeName: ").Append(DeliveryPostOfficeName).Append("\n");
            sb.Append("  AddressAtSubmission: ").Append(AddressAtSubmission).Append("\n");
            sb.Append("  CategoryError: ").Append(CategoryError).Append("\n");
            sb.Append("  FlagErrMdm: ").Append(FlagErrMdm).Append("\n");
            sb.Append("  ClearedCAD: ").Append(ClearedCAD).Append("\n");
            sb.Append("  AdrMatchMdm: ").Append(AdrMatchMdm).Append("\n");
            sb.Append("  ReplacementCode: ").Append(ReplacementCode).Append("\n");
            sb.Append("  AddressLocation: ").Append(AddressLocation).Append("\n");
            sb.Append("  EmailAddressee: ").Append(EmailAddressee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QualityData);
        }

        /// <summary>
        /// Returns true if QualityData instances are equal
        /// </summary>
        /// <param name="input">Instance of QualityData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QualityData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CustomerID == input.CustomerID ||
                    (this.CustomerID != null &&
                    this.CustomerID.Equals(input.CustomerID))
                ) && 
                (
                    this.IdContractHeadquarters == input.IdContractHeadquarters ||
                    (this.IdContractHeadquarters != null &&
                    this.IdContractHeadquarters.Equals(input.IdContractHeadquarters))
                ) && 
                (
                    this.IdContractBranch == input.IdContractBranch ||
                    (this.IdContractBranch != null &&
                    this.IdContractBranch.Equals(input.IdContractBranch))
                ) && 
                (
                    this.NameHeadquarters == input.NameHeadquarters ||
                    (this.NameHeadquarters != null &&
                    this.NameHeadquarters.Equals(input.NameHeadquarters))
                ) && 
                (
                    this.ParcelCode == input.ParcelCode ||
                    (this.ParcelCode != null &&
                    this.ParcelCode.Equals(input.ParcelCode))
                ) && 
                (
                    this.Prefix == input.Prefix ||
                    (this.Prefix != null &&
                    this.Prefix.Equals(input.Prefix))
                ) && 
                (
                    this.ProductType == input.ProductType ||
                    (this.ProductType != null &&
                    this.ProductType.Equals(input.ProductType))
                ) && 
                (
                    this.SubmissionDate == input.SubmissionDate ||
                    (this.SubmissionDate != null &&
                    this.SubmissionDate.Equals(input.SubmissionDate))
                ) && 
                (
                    this.SubmissionPostCode == input.SubmissionPostCode ||
                    (this.SubmissionPostCode != null &&
                    this.SubmissionPostCode.Equals(input.SubmissionPostCode))
                ) && 
                (
                    this.SubmissionPostOfficeName == input.SubmissionPostOfficeName ||
                    (this.SubmissionPostOfficeName != null &&
                    this.SubmissionPostOfficeName.Equals(input.SubmissionPostOfficeName))
                ) && 
                (
                    this.DeliveryPostCode == input.DeliveryPostCode ||
                    (this.DeliveryPostCode != null &&
                    this.DeliveryPostCode.Equals(input.DeliveryPostCode))
                ) && 
                (
                    this.DeliveryPostOfficeName == input.DeliveryPostOfficeName ||
                    (this.DeliveryPostOfficeName != null &&
                    this.DeliveryPostOfficeName.Equals(input.DeliveryPostOfficeName))
                ) && 
                (
                    this.AddressAtSubmission == input.AddressAtSubmission ||
                    (this.AddressAtSubmission != null &&
                    this.AddressAtSubmission.Equals(input.AddressAtSubmission))
                ) && 
                (
                    this.CategoryError == input.CategoryError ||
                    (this.CategoryError != null &&
                    this.CategoryError.Equals(input.CategoryError))
                ) && 
                (
                    this.FlagErrMdm == input.FlagErrMdm ||
                    (this.FlagErrMdm != null &&
                    this.FlagErrMdm.Equals(input.FlagErrMdm))
                ) && 
                (
                    this.ClearedCAD == input.ClearedCAD ||
                    (this.ClearedCAD != null &&
                    this.ClearedCAD.Equals(input.ClearedCAD))
                ) && 
                (
                    this.AdrMatchMdm == input.AdrMatchMdm ||
                    (this.AdrMatchMdm != null &&
                    this.AdrMatchMdm.Equals(input.AdrMatchMdm))
                ) && 
                (
                    this.ReplacementCode == input.ReplacementCode ||
                    (this.ReplacementCode != null &&
                    this.ReplacementCode.Equals(input.ReplacementCode))
                ) && 
                (
                    this.AddressLocation == input.AddressLocation ||
                    (this.AddressLocation != null &&
                    this.AddressLocation.Equals(input.AddressLocation))
                ) && 
                (
                    this.EmailAddressee == input.EmailAddressee ||
                    (this.EmailAddressee != null &&
                    this.EmailAddressee.Equals(input.EmailAddressee))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CustomerID != null)
                    hashCode = hashCode * 59 + this.CustomerID.GetHashCode();
                if (this.IdContractHeadquarters != null)
                    hashCode = hashCode * 59 + this.IdContractHeadquarters.GetHashCode();
                if (this.IdContractBranch != null)
                    hashCode = hashCode * 59 + this.IdContractBranch.GetHashCode();
                if (this.NameHeadquarters != null)
                    hashCode = hashCode * 59 + this.NameHeadquarters.GetHashCode();
                if (this.ParcelCode != null)
                    hashCode = hashCode * 59 + this.ParcelCode.GetHashCode();
                if (this.Prefix != null)
                    hashCode = hashCode * 59 + this.Prefix.GetHashCode();
                if (this.ProductType != null)
                    hashCode = hashCode * 59 + this.ProductType.GetHashCode();
                if (this.SubmissionDate != null)
                    hashCode = hashCode * 59 + this.SubmissionDate.GetHashCode();
                if (this.SubmissionPostCode != null)
                    hashCode = hashCode * 59 + this.SubmissionPostCode.GetHashCode();
                if (this.SubmissionPostOfficeName != null)
                    hashCode = hashCode * 59 + this.SubmissionPostOfficeName.GetHashCode();
                if (this.DeliveryPostCode != null)
                    hashCode = hashCode * 59 + this.DeliveryPostCode.GetHashCode();
                if (this.DeliveryPostOfficeName != null)
                    hashCode = hashCode * 59 + this.DeliveryPostOfficeName.GetHashCode();
                if (this.AddressAtSubmission != null)
                    hashCode = hashCode * 59 + this.AddressAtSubmission.GetHashCode();
                if (this.CategoryError != null)
                    hashCode = hashCode * 59 + this.CategoryError.GetHashCode();
                if (this.FlagErrMdm != null)
                    hashCode = hashCode * 59 + this.FlagErrMdm.GetHashCode();
                if (this.ClearedCAD != null)
                    hashCode = hashCode * 59 + this.ClearedCAD.GetHashCode();
                if (this.AdrMatchMdm != null)
                    hashCode = hashCode * 59 + this.AdrMatchMdm.GetHashCode();
                if (this.ReplacementCode != null)
                    hashCode = hashCode * 59 + this.ReplacementCode.GetHashCode();
                if (this.AddressLocation != null)
                    hashCode = hashCode * 59 + this.AddressLocation.GetHashCode();
                if (this.EmailAddressee != null)
                    hashCode = hashCode * 59 + this.EmailAddressee.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
