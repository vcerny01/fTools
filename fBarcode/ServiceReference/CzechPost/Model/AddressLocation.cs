/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// AddressLocation
    /// </summary>
    [DataContract]
        public partial class AddressLocation :  IEquatable<AddressLocation>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddressLocation" /> class.
        /// </summary>
        /// <param name="street">Name of the street. / Název ulice..</param>
        /// <param name="houseNumber">Descriptive (house) number. / Číslo popisné..</param>
        /// <param name="sequenceNumber">Orientation (sequence) number. / Číslo orientační..</param>
        /// <param name="cityPart">Part of the city. / Část obce..</param>
        /// <param name="city">City. / Obec..</param>
        /// <param name="zipCode">Postal code. / PSČ..</param>
        public AddressLocation(string street = default(string), string houseNumber = default(string), string sequenceNumber = default(string), string cityPart = default(string), string city = default(string), string zipCode = default(string))
        {
            this.Street = street;
            this.HouseNumber = houseNumber;
            this.SequenceNumber = sequenceNumber;
            this.CityPart = cityPart;
            this.City = city;
            this.ZipCode = zipCode;
        }
        
        /// <summary>
        /// Name of the street. / Název ulice.
        /// </summary>
        /// <value>Name of the street. / Název ulice.</value>
        [DataMember(Name="street", EmitDefaultValue=false)]
        public string Street { get; set; }

        /// <summary>
        /// Descriptive (house) number. / Číslo popisné.
        /// </summary>
        /// <value>Descriptive (house) number. / Číslo popisné.</value>
        [DataMember(Name="houseNumber", EmitDefaultValue=false)]
        public string HouseNumber { get; set; }

        /// <summary>
        /// Orientation (sequence) number. / Číslo orientační.
        /// </summary>
        /// <value>Orientation (sequence) number. / Číslo orientační.</value>
        [DataMember(Name="sequenceNumber", EmitDefaultValue=false)]
        public string SequenceNumber { get; set; }

        /// <summary>
        /// Part of the city. / Část obce.
        /// </summary>
        /// <value>Part of the city. / Část obce.</value>
        [DataMember(Name="cityPart", EmitDefaultValue=false)]
        public string CityPart { get; set; }

        /// <summary>
        /// City. / Obec.
        /// </summary>
        /// <value>City. / Obec.</value>
        [DataMember(Name="city", EmitDefaultValue=false)]
        public string City { get; set; }

        /// <summary>
        /// Postal code. / PSČ.
        /// </summary>
        /// <value>Postal code. / PSČ.</value>
        [DataMember(Name="zipCode", EmitDefaultValue=false)]
        public string ZipCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AddressLocation {\n");
            sb.Append("  Street: ").Append(Street).Append("\n");
            sb.Append("  HouseNumber: ").Append(HouseNumber).Append("\n");
            sb.Append("  SequenceNumber: ").Append(SequenceNumber).Append("\n");
            sb.Append("  CityPart: ").Append(CityPart).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddressLocation);
        }

        /// <summary>
        /// Returns true if AddressLocation instances are equal
        /// </summary>
        /// <param name="input">Instance of AddressLocation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddressLocation input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Street == input.Street ||
                    (this.Street != null &&
                    this.Street.Equals(input.Street))
                ) && 
                (
                    this.HouseNumber == input.HouseNumber ||
                    (this.HouseNumber != null &&
                    this.HouseNumber.Equals(input.HouseNumber))
                ) && 
                (
                    this.SequenceNumber == input.SequenceNumber ||
                    (this.SequenceNumber != null &&
                    this.SequenceNumber.Equals(input.SequenceNumber))
                ) && 
                (
                    this.CityPart == input.CityPart ||
                    (this.CityPart != null &&
                    this.CityPart.Equals(input.CityPart))
                ) && 
                (
                    this.City == input.City ||
                    (this.City != null &&
                    this.City.Equals(input.City))
                ) && 
                (
                    this.ZipCode == input.ZipCode ||
                    (this.ZipCode != null &&
                    this.ZipCode.Equals(input.ZipCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Street != null)
                    hashCode = hashCode * 59 + this.Street.GetHashCode();
                if (this.HouseNumber != null)
                    hashCode = hashCode * 59 + this.HouseNumber.GetHashCode();
                if (this.SequenceNumber != null)
                    hashCode = hashCode * 59 + this.SequenceNumber.GetHashCode();
                if (this.CityPart != null)
                    hashCode = hashCode * 59 + this.CityPart.GetHashCode();
                if (this.City != null)
                    hashCode = hashCode * 59 + this.City.GetHashCode();
                if (this.ZipCode != null)
                    hashCode = hashCode * 59 + this.ZipCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
