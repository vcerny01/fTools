/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// Data detail of parcels. / Detail dat zásilky.
    /// </summary>
    [DataContract]
        public partial class ParcelDataHistory :  IEquatable<ParcelDataHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelDataHistory" /> class.
        /// </summary>
        /// <param name="parcelCode">parcelCode.</param>
        /// <param name="customerID">customerID.</param>
        /// <param name="name">Name./Jméno..</param>
        /// <param name="surname">Surname./Příjmení..</param>
        /// <param name="company">Company name. / Název společnosti..</param>
        /// <param name="aditionAddress">Aditional information. / Doplňující informace k názvu adresáta..</param>
        /// <param name="address">address.</param>
        /// <param name="cashOnDelivery">cashOnDelivery.</param>
        /// <param name="insuredValue">insuredValue.</param>
        /// <param name="weight">weight.</param>
        /// <param name="services">services.</param>
        /// <param name="vsVoucher">vsVoucher.</param>
        /// <param name="vsParcel">vsParcel.</param>
        /// <param name="currency">currency.</param>
        /// <param name="height">height.</param>
        /// <param name="width">width.</param>
        /// <param name="lenght">lenght.</param>
        /// <param name="volumeWeight">volumeWeight.</param>
        /// <param name="payoutAmount">payoutAmount.</param>
        /// <param name="payoutAmountSum">payoutAmountSum.</param>
        /// <param name="sumWeight">sumWeight.</param>
        /// <param name="masterCode">masterCode.</param>
        /// <param name="sequenceParcel">sequenceParcel.</param>
        /// <param name="quantityParcel">quantityParcel.</param>
        /// <param name="creditedData">creditedData.</param>
        /// <param name="senderCustCardNum">senderCustCardNum.</param>
        public ParcelDataHistory(string parcelCode = default(string), string customerID = default(string), string name = default(string), string surname = default(string), string company = default(string), string aditionAddress = default(string), AddressCOMMON address = default(AddressCOMMON), double? cashOnDelivery = default(double?), double? insuredValue = default(double?), string weight = default(string), string services = default(string), string vsVoucher = default(string), string vsParcel = default(string), string currency = default(string), int? height = default(int?), int? width = default(int?), int? lenght = default(int?), string volumeWeight = default(string), double? payoutAmount = default(double?), double? payoutAmountSum = default(double?), string sumWeight = default(string), string masterCode = default(string), int? sequenceParcel = default(int?), int? quantityParcel = default(int?), CreditedData creditedData = default(CreditedData), string senderCustCardNum = default(string))
        {
            this.ParcelCode = parcelCode;
            this.CustomerID = customerID;
            this.Name = name;
            this.Surname = surname;
            this.Company = company;
            this.AditionAddress = aditionAddress;
            this.Address = address;
            this.CashOnDelivery = cashOnDelivery;
            this.InsuredValue = insuredValue;
            this.Weight = weight;
            this.Services = services;
            this.VsVoucher = vsVoucher;
            this.VsParcel = vsParcel;
            this.Currency = currency;
            this.Height = height;
            this.Width = width;
            this.Lenght = lenght;
            this.VolumeWeight = volumeWeight;
            this.PayoutAmount = payoutAmount;
            this.PayoutAmountSum = payoutAmountSum;
            this.SumWeight = sumWeight;
            this.MasterCode = masterCode;
            this.SequenceParcel = sequenceParcel;
            this.QuantityParcel = quantityParcel;
            this.CreditedData = creditedData;
            this.SenderCustCardNum = senderCustCardNum;
        }
        
        /// <summary>
        /// Gets or Sets ParcelCode
        /// </summary>
        [DataMember(Name="parcelCode", EmitDefaultValue=false)]
        public string ParcelCode { get; set; }

        /// <summary>
        /// Gets or Sets CustomerID
        /// </summary>
        [DataMember(Name="customerID", EmitDefaultValue=false)]
        public string CustomerID { get; set; }

        /// <summary>
        /// Name./Jméno.
        /// </summary>
        /// <value>Name./Jméno.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Surname./Příjmení.
        /// </summary>
        /// <value>Surname./Příjmení.</value>
        [DataMember(Name="surname", EmitDefaultValue=false)]
        public string Surname { get; set; }

        /// <summary>
        /// Company name. / Název společnosti.
        /// </summary>
        /// <value>Company name. / Název společnosti.</value>
        [DataMember(Name="company", EmitDefaultValue=false)]
        public string Company { get; set; }

        /// <summary>
        /// Aditional information. / Doplňující informace k názvu adresáta.
        /// </summary>
        /// <value>Aditional information. / Doplňující informace k názvu adresáta.</value>
        [DataMember(Name="aditionAddress", EmitDefaultValue=false)]
        public string AditionAddress { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public AddressCOMMON Address { get; set; }

        /// <summary>
        /// Gets or Sets CashOnDelivery
        /// </summary>
        [DataMember(Name="cashOnDelivery", EmitDefaultValue=false)]
        public double? CashOnDelivery { get; set; }

        /// <summary>
        /// Gets or Sets InsuredValue
        /// </summary>
        [DataMember(Name="insuredValue", EmitDefaultValue=false)]
        public double? InsuredValue { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name="weight", EmitDefaultValue=false)]
        public string Weight { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [DataMember(Name="services", EmitDefaultValue=false)]
        public string Services { get; set; }

        /// <summary>
        /// Gets or Sets VsVoucher
        /// </summary>
        [DataMember(Name="vsVoucher", EmitDefaultValue=false)]
        public string VsVoucher { get; set; }

        /// <summary>
        /// Gets or Sets VsParcel
        /// </summary>
        [DataMember(Name="vsParcel", EmitDefaultValue=false)]
        public string VsParcel { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// Gets or Sets Lenght
        /// </summary>
        [DataMember(Name="lenght", EmitDefaultValue=false)]
        public int? Lenght { get; set; }

        /// <summary>
        /// Gets or Sets VolumeWeight
        /// </summary>
        [DataMember(Name="volumeWeight", EmitDefaultValue=false)]
        public string VolumeWeight { get; set; }

        /// <summary>
        /// Gets or Sets PayoutAmount
        /// </summary>
        [DataMember(Name="payoutAmount", EmitDefaultValue=false)]
        public double? PayoutAmount { get; set; }

        /// <summary>
        /// Gets or Sets PayoutAmountSum
        /// </summary>
        [DataMember(Name="payoutAmountSum", EmitDefaultValue=false)]
        public double? PayoutAmountSum { get; set; }

        /// <summary>
        /// Gets or Sets SumWeight
        /// </summary>
        [DataMember(Name="sumWeight", EmitDefaultValue=false)]
        public string SumWeight { get; set; }

        /// <summary>
        /// Gets or Sets MasterCode
        /// </summary>
        [DataMember(Name="masterCode", EmitDefaultValue=false)]
        public string MasterCode { get; set; }

        /// <summary>
        /// Gets or Sets SequenceParcel
        /// </summary>
        [DataMember(Name="sequenceParcel", EmitDefaultValue=false)]
        public int? SequenceParcel { get; set; }

        /// <summary>
        /// Gets or Sets QuantityParcel
        /// </summary>
        [DataMember(Name="quantityParcel", EmitDefaultValue=false)]
        public int? QuantityParcel { get; set; }

        /// <summary>
        /// Gets or Sets CreditedData
        /// </summary>
        [DataMember(Name="creditedData", EmitDefaultValue=false)]
        public CreditedData CreditedData { get; set; }

        /// <summary>
        /// Gets or Sets SenderCustCardNum
        /// </summary>
        [DataMember(Name="senderCustCardNum", EmitDefaultValue=false)]
        public string SenderCustCardNum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParcelDataHistory {\n");
            sb.Append("  ParcelCode: ").Append(ParcelCode).Append("\n");
            sb.Append("  CustomerID: ").Append(CustomerID).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Surname: ").Append(Surname).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  AditionAddress: ").Append(AditionAddress).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  CashOnDelivery: ").Append(CashOnDelivery).Append("\n");
            sb.Append("  InsuredValue: ").Append(InsuredValue).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  VsVoucher: ").Append(VsVoucher).Append("\n");
            sb.Append("  VsParcel: ").Append(VsParcel).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Lenght: ").Append(Lenght).Append("\n");
            sb.Append("  VolumeWeight: ").Append(VolumeWeight).Append("\n");
            sb.Append("  PayoutAmount: ").Append(PayoutAmount).Append("\n");
            sb.Append("  PayoutAmountSum: ").Append(PayoutAmountSum).Append("\n");
            sb.Append("  SumWeight: ").Append(SumWeight).Append("\n");
            sb.Append("  MasterCode: ").Append(MasterCode).Append("\n");
            sb.Append("  SequenceParcel: ").Append(SequenceParcel).Append("\n");
            sb.Append("  QuantityParcel: ").Append(QuantityParcel).Append("\n");
            sb.Append("  CreditedData: ").Append(CreditedData).Append("\n");
            sb.Append("  SenderCustCardNum: ").Append(SenderCustCardNum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelDataHistory);
        }

        /// <summary>
        /// Returns true if ParcelDataHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelDataHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelDataHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParcelCode == input.ParcelCode ||
                    (this.ParcelCode != null &&
                    this.ParcelCode.Equals(input.ParcelCode))
                ) && 
                (
                    this.CustomerID == input.CustomerID ||
                    (this.CustomerID != null &&
                    this.CustomerID.Equals(input.CustomerID))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Surname == input.Surname ||
                    (this.Surname != null &&
                    this.Surname.Equals(input.Surname))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.AditionAddress == input.AditionAddress ||
                    (this.AditionAddress != null &&
                    this.AditionAddress.Equals(input.AditionAddress))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.CashOnDelivery == input.CashOnDelivery ||
                    (this.CashOnDelivery != null &&
                    this.CashOnDelivery.Equals(input.CashOnDelivery))
                ) && 
                (
                    this.InsuredValue == input.InsuredValue ||
                    (this.InsuredValue != null &&
                    this.InsuredValue.Equals(input.InsuredValue))
                ) && 
                (
                    this.Weight == input.Weight ||
                    (this.Weight != null &&
                    this.Weight.Equals(input.Weight))
                ) && 
                (
                    this.Services == input.Services ||
                    (this.Services != null &&
                    this.Services.Equals(input.Services))
                ) && 
                (
                    this.VsVoucher == input.VsVoucher ||
                    (this.VsVoucher != null &&
                    this.VsVoucher.Equals(input.VsVoucher))
                ) && 
                (
                    this.VsParcel == input.VsParcel ||
                    (this.VsParcel != null &&
                    this.VsParcel.Equals(input.VsParcel))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Lenght == input.Lenght ||
                    (this.Lenght != null &&
                    this.Lenght.Equals(input.Lenght))
                ) && 
                (
                    this.VolumeWeight == input.VolumeWeight ||
                    (this.VolumeWeight != null &&
                    this.VolumeWeight.Equals(input.VolumeWeight))
                ) && 
                (
                    this.PayoutAmount == input.PayoutAmount ||
                    (this.PayoutAmount != null &&
                    this.PayoutAmount.Equals(input.PayoutAmount))
                ) && 
                (
                    this.PayoutAmountSum == input.PayoutAmountSum ||
                    (this.PayoutAmountSum != null &&
                    this.PayoutAmountSum.Equals(input.PayoutAmountSum))
                ) && 
                (
                    this.SumWeight == input.SumWeight ||
                    (this.SumWeight != null &&
                    this.SumWeight.Equals(input.SumWeight))
                ) && 
                (
                    this.MasterCode == input.MasterCode ||
                    (this.MasterCode != null &&
                    this.MasterCode.Equals(input.MasterCode))
                ) && 
                (
                    this.SequenceParcel == input.SequenceParcel ||
                    (this.SequenceParcel != null &&
                    this.SequenceParcel.Equals(input.SequenceParcel))
                ) && 
                (
                    this.QuantityParcel == input.QuantityParcel ||
                    (this.QuantityParcel != null &&
                    this.QuantityParcel.Equals(input.QuantityParcel))
                ) && 
                (
                    this.CreditedData == input.CreditedData ||
                    (this.CreditedData != null &&
                    this.CreditedData.Equals(input.CreditedData))
                ) && 
                (
                    this.SenderCustCardNum == input.SenderCustCardNum ||
                    (this.SenderCustCardNum != null &&
                    this.SenderCustCardNum.Equals(input.SenderCustCardNum))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParcelCode != null)
                    hashCode = hashCode * 59 + this.ParcelCode.GetHashCode();
                if (this.CustomerID != null)
                    hashCode = hashCode * 59 + this.CustomerID.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Surname != null)
                    hashCode = hashCode * 59 + this.Surname.GetHashCode();
                if (this.Company != null)
                    hashCode = hashCode * 59 + this.Company.GetHashCode();
                if (this.AditionAddress != null)
                    hashCode = hashCode * 59 + this.AditionAddress.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.CashOnDelivery != null)
                    hashCode = hashCode * 59 + this.CashOnDelivery.GetHashCode();
                if (this.InsuredValue != null)
                    hashCode = hashCode * 59 + this.InsuredValue.GetHashCode();
                if (this.Weight != null)
                    hashCode = hashCode * 59 + this.Weight.GetHashCode();
                if (this.Services != null)
                    hashCode = hashCode * 59 + this.Services.GetHashCode();
                if (this.VsVoucher != null)
                    hashCode = hashCode * 59 + this.VsVoucher.GetHashCode();
                if (this.VsParcel != null)
                    hashCode = hashCode * 59 + this.VsParcel.GetHashCode();
                if (this.Currency != null)
                    hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Lenght != null)
                    hashCode = hashCode * 59 + this.Lenght.GetHashCode();
                if (this.VolumeWeight != null)
                    hashCode = hashCode * 59 + this.VolumeWeight.GetHashCode();
                if (this.PayoutAmount != null)
                    hashCode = hashCode * 59 + this.PayoutAmount.GetHashCode();
                if (this.PayoutAmountSum != null)
                    hashCode = hashCode * 59 + this.PayoutAmountSum.GetHashCode();
                if (this.SumWeight != null)
                    hashCode = hashCode * 59 + this.SumWeight.GetHashCode();
                if (this.MasterCode != null)
                    hashCode = hashCode * 59 + this.MasterCode.GetHashCode();
                if (this.SequenceParcel != null)
                    hashCode = hashCode * 59 + this.SequenceParcel.GetHashCode();
                if (this.QuantityParcel != null)
                    hashCode = hashCode * 59 + this.QuantityParcel.GetHashCode();
                if (this.CreditedData != null)
                    hashCode = hashCode * 59 + this.CreditedData.GetHashCode();
                if (this.SenderCustCardNum != null)
                    hashCode = hashCode * 59 + this.SenderCustCardNum.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
