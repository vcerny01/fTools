/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// Datas of customs declaration. / Data celního prohlášení.
    /// </summary>
    [DataContract]
        public partial class ParcelCustomsDeclaration :  IEquatable<ParcelCustomsDeclaration>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelCustomsDeclaration" /> class.
        /// </summary>
        /// <param name="category">category (required).</param>
        /// <param name="note">note.</param>
        /// <param name="customValCur">customValCur (required).</param>
        /// <param name="parcelCustomGoods">parcelCustomGoods (required).</param>
        public ParcelCustomsDeclaration(string category = default(string), string note = default(string), string customValCur = default(string), List<ParcelCustomGoods> parcelCustomGoods = default(List<ParcelCustomGoods>))
        {
            // to ensure "category" is required (not null)
            if (category == null)
            {
                throw new InvalidDataException("category is a required property for ParcelCustomsDeclaration and cannot be null");
            }
            else
            {
                this.Category = category;
            }
            // to ensure "customValCur" is required (not null)
            if (customValCur == null)
            {
                throw new InvalidDataException("customValCur is a required property for ParcelCustomsDeclaration and cannot be null");
            }
            else
            {
                this.CustomValCur = customValCur;
            }
            // to ensure "parcelCustomGoods" is required (not null)
            if (parcelCustomGoods == null)
            {
                throw new InvalidDataException("parcelCustomGoods is a required property for ParcelCustomsDeclaration and cannot be null");
            }
            else
            {
                this.ParcelCustomGoods = parcelCustomGoods;
            }
            this.Note = note;
        }
        
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name="note", EmitDefaultValue=false)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets CustomValCur
        /// </summary>
        [DataMember(Name="customValCur", EmitDefaultValue=false)]
        public string CustomValCur { get; set; }

        /// <summary>
        /// Gets or Sets ParcelCustomGoods
        /// </summary>
        [DataMember(Name="parcelCustomGoods", EmitDefaultValue=false)]
        public List<ParcelCustomGoods> ParcelCustomGoods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParcelCustomsDeclaration {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  CustomValCur: ").Append(CustomValCur).Append("\n");
            sb.Append("  ParcelCustomGoods: ").Append(ParcelCustomGoods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelCustomsDeclaration);
        }

        /// <summary>
        /// Returns true if ParcelCustomsDeclaration instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelCustomsDeclaration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelCustomsDeclaration input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) && 
                (
                    this.CustomValCur == input.CustomValCur ||
                    (this.CustomValCur != null &&
                    this.CustomValCur.Equals(input.CustomValCur))
                ) && 
                (
                    this.ParcelCustomGoods == input.ParcelCustomGoods ||
                    this.ParcelCustomGoods != null &&
                    input.ParcelCustomGoods != null &&
                    this.ParcelCustomGoods.SequenceEqual(input.ParcelCustomGoods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.CustomValCur != null)
                    hashCode = hashCode * 59 + this.CustomValCur.GetHashCode();
                if (this.ParcelCustomGoods != null)
                    hashCode = hashCode * 59 + this.ParcelCustomGoods.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
