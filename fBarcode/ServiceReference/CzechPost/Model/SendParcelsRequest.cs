/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// SendParcelsRequest
    /// </summary>
    [DataContract]
        public partial class SendParcelsRequest :  IEquatable<SendParcelsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SendParcelsRequest" /> class.
        /// </summary>
        /// <param name="parcelHeader">parcelHeader (required).</param>
        /// <param name="parcelDataList">Parcels datas. / Data zásilek..</param>
        public SendParcelsRequest(ParcelHeader parcelHeader = default(ParcelHeader), List<ParcelData> parcelDataList = default(List<ParcelData>))
        {
            // to ensure "parcelHeader" is required (not null)
            if (parcelHeader == null)
            {
                throw new InvalidDataException("parcelHeader is a required property for SendParcelsRequest and cannot be null");
            }
            else
            {
                this.ParcelHeader = parcelHeader;
            }
            this.ParcelDataList = parcelDataList;
        }
        
        /// <summary>
        /// Gets or Sets ParcelHeader
        /// </summary>
        [DataMember(Name="parcelHeader", EmitDefaultValue=false)]
        public ParcelHeader ParcelHeader { get; set; }

        /// <summary>
        /// Parcels datas. / Data zásilek.
        /// </summary>
        /// <value>Parcels datas. / Data zásilek.</value>
        [DataMember(Name="parcelDataList", EmitDefaultValue=false)]
        public List<ParcelData> ParcelDataList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SendParcelsRequest {\n");
            sb.Append("  ParcelHeader: ").Append(ParcelHeader).Append("\n");
            sb.Append("  ParcelDataList: ").Append(ParcelDataList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SendParcelsRequest);
        }

        /// <summary>
        /// Returns true if SendParcelsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of SendParcelsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SendParcelsRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParcelHeader == input.ParcelHeader ||
                    (this.ParcelHeader != null &&
                    this.ParcelHeader.Equals(input.ParcelHeader))
                ) && 
                (
                    this.ParcelDataList == input.ParcelDataList ||
                    this.ParcelDataList != null &&
                    input.ParcelDataList != null &&
                    this.ParcelDataList.SequenceEqual(input.ParcelDataList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParcelHeader != null)
                    hashCode = hashCode * 59 + this.ParcelHeader.GetHashCode();
                if (this.ParcelDataList != null)
                    hashCode = hashCode * 59 + this.ParcelDataList.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
