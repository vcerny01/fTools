/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// Parcel status for parcel history. Intended for  POL user. /Stavy zásilek pro historii zásilky. Určeno pro podavatele POL.
    /// </summary>
    [DataContract]
        public partial class ParcelStatusHistory :  IEquatable<ParcelStatusHistory>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ParcelStatusHistory" /> class.
        /// </summary>
        /// <param name="parcelCode">parcelCode.</param>
        /// <param name="customerID">customerID.</param>
        /// <param name="date">Date-time of the status. / Datum a čas vzniku stavu..</param>
        /// <param name="status">Status of the parcel + name of the status. / Stav zásilky + název stavu..</param>
        /// <param name="statusPostCode">Postal code and the post office name of the origin of the status. / PSČ vzniku stavu a název..</param>
        /// <param name="targetPostCode">Postal code of the target. / PSČ cíle..</param>
        public ParcelStatusHistory(string parcelCode = default(string), string customerID = default(string), DateTime? date = default(DateTime?), string status = default(string), string statusPostCode = default(string), string targetPostCode = default(string))
        {
            this.ParcelCode = parcelCode;
            this.CustomerID = customerID;
            this.Date = date;
            this.Status = status;
            this.StatusPostCode = statusPostCode;
            this.TargetPostCode = targetPostCode;
        }
        
        /// <summary>
        /// Gets or Sets ParcelCode
        /// </summary>
        [DataMember(Name="parcelCode", EmitDefaultValue=false)]
        public string ParcelCode { get; set; }

        /// <summary>
        /// Gets or Sets CustomerID
        /// </summary>
        [DataMember(Name="customerID", EmitDefaultValue=false)]
        public string CustomerID { get; set; }

        /// <summary>
        /// Date-time of the status. / Datum a čas vzniku stavu.
        /// </summary>
        /// <value>Date-time of the status. / Datum a čas vzniku stavu.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public DateTime? Date { get; set; }

        /// <summary>
        /// Status of the parcel + name of the status. / Stav zásilky + název stavu.
        /// </summary>
        /// <value>Status of the parcel + name of the status. / Stav zásilky + název stavu.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Postal code and the post office name of the origin of the status. / PSČ vzniku stavu a název.
        /// </summary>
        /// <value>Postal code and the post office name of the origin of the status. / PSČ vzniku stavu a název.</value>
        [DataMember(Name="statusPostCode", EmitDefaultValue=false)]
        public string StatusPostCode { get; set; }

        /// <summary>
        /// Postal code of the target. / PSČ cíle.
        /// </summary>
        /// <value>Postal code of the target. / PSČ cíle.</value>
        [DataMember(Name="targetPostCode", EmitDefaultValue=false)]
        public string TargetPostCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ParcelStatusHistory {\n");
            sb.Append("  ParcelCode: ").Append(ParcelCode).Append("\n");
            sb.Append("  CustomerID: ").Append(CustomerID).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusPostCode: ").Append(StatusPostCode).Append("\n");
            sb.Append("  TargetPostCode: ").Append(TargetPostCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ParcelStatusHistory);
        }

        /// <summary>
        /// Returns true if ParcelStatusHistory instances are equal
        /// </summary>
        /// <param name="input">Instance of ParcelStatusHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ParcelStatusHistory input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ParcelCode == input.ParcelCode ||
                    (this.ParcelCode != null &&
                    this.ParcelCode.Equals(input.ParcelCode))
                ) && 
                (
                    this.CustomerID == input.CustomerID ||
                    (this.CustomerID != null &&
                    this.CustomerID.Equals(input.CustomerID))
                ) && 
                (
                    this.Date == input.Date ||
                    (this.Date != null &&
                    this.Date.Equals(input.Date))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.StatusPostCode == input.StatusPostCode ||
                    (this.StatusPostCode != null &&
                    this.StatusPostCode.Equals(input.StatusPostCode))
                ) && 
                (
                    this.TargetPostCode == input.TargetPostCode ||
                    (this.TargetPostCode != null &&
                    this.TargetPostCode.Equals(input.TargetPostCode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ParcelCode != null)
                    hashCode = hashCode * 59 + this.ParcelCode.GetHashCode();
                if (this.CustomerID != null)
                    hashCode = hashCode * 59 + this.CustomerID.GetHashCode();
                if (this.Date != null)
                    hashCode = hashCode * 59 + this.Date.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.StatusPostCode != null)
                    hashCode = hashCode * 59 + this.StatusPostCode.GetHashCode();
                if (this.TargetPostCode != null)
                    hashCode = hashCode * 59 + this.TargetPostCode.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
