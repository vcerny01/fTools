/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// AdviceInfo
    /// </summary>
    [DataContract]
        public partial class AdviceInfo :  IEquatable<AdviceInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AdviceInfo" /> class.
        /// </summary>
        /// <param name="adviceInformationsList">adviceInformationsList.</param>
        /// <param name="adviceNote">Note for delivery note (maxLength &#x3D; 15). / Poznámka k dodejce..</param>
        public AdviceInfo(AdviceInformationsList adviceInformationsList = default(AdviceInformationsList), string adviceNote = default(string))
        {
            this.AdviceInformationsList = adviceInformationsList;
            this.AdviceNote = adviceNote;
        }
        
        /// <summary>
        /// Gets or Sets AdviceInformationsList
        /// </summary>
        [DataMember(Name="adviceInformationsList", EmitDefaultValue=false)]
        public AdviceInformationsList AdviceInformationsList { get; set; }

        /// <summary>
        /// Note for delivery note (maxLength &#x3D; 15). / Poznámka k dodejce.
        /// </summary>
        /// <value>Note for delivery note (maxLength &#x3D; 15). / Poznámka k dodejce.</value>
        [DataMember(Name="adviceNote", EmitDefaultValue=false)]
        public string AdviceNote { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AdviceInfo {\n");
            sb.Append("  AdviceInformationsList: ").Append(AdviceInformationsList).Append("\n");
            sb.Append("  AdviceNote: ").Append(AdviceNote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AdviceInfo);
        }

        /// <summary>
        /// Returns true if AdviceInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of AdviceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AdviceInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.AdviceInformationsList == input.AdviceInformationsList ||
                    (this.AdviceInformationsList != null &&
                    this.AdviceInformationsList.Equals(input.AdviceInformationsList))
                ) && 
                (
                    this.AdviceNote == input.AdviceNote ||
                    (this.AdviceNote != null &&
                    this.AdviceNote.Equals(input.AdviceNote))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AdviceInformationsList != null)
                    hashCode = hashCode * 59 + this.AdviceInformationsList.GetHashCode();
                if (this.AdviceNote != null)
                    hashCode = hashCode * 59 + this.AdviceNote.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
