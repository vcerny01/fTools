/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.CzechPost.Client.SwaggerDateConverter;
namespace IO.Swagger.CzechPost.Model
{
    /// <summary>
    /// ResponsePrintParams
    /// </summary>
    [DataContract]
        public partial class ResponsePrintParams :  IEquatable<ResponsePrintParams>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponsePrintParams" /> class.
        /// </summary>
        /// <param name="file">file.</param>
        /// <param name="printParamsResponse">printParamsResponse.</param>
        public ResponsePrintParams(byte[] file = default(byte[]), List<StatusResponseItem> printParamsResponse = default(List<StatusResponseItem>))
        {
            this.File = file;
            this.PrintParamsResponse = printParamsResponse;
        }
        
        /// <summary>
        /// Gets or Sets File
        /// </summary>
        [DataMember(Name="file", EmitDefaultValue=false)]
        public byte[] File { get; set; }

        /// <summary>
        /// Gets or Sets PrintParamsResponse
        /// </summary>
        [DataMember(Name="printParamsResponse", EmitDefaultValue=false)]
        public List<StatusResponseItem> PrintParamsResponse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponsePrintParams {\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  PrintParamsResponse: ").Append(PrintParamsResponse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponsePrintParams);
        }

        /// <summary>
        /// Returns true if ResponsePrintParams instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponsePrintParams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponsePrintParams input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.File == input.File ||
                    (this.File != null &&
                    this.File.Equals(input.File))
                ) && 
                (
                    this.PrintParamsResponse == input.PrintParamsResponse ||
                    this.PrintParamsResponse != null &&
                    input.PrintParamsResponse != null &&
                    this.PrintParamsResponse.SequenceEqual(input.PrintParamsResponse)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.File != null)
                    hashCode = hashCode * 59 + this.File.GetHashCode();
                if (this.PrintParamsResponse != null)
                    hashCode = hashCode * 59 + this.PrintParamsResponse.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
