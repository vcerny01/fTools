/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.CzechPost.Client;
using IO.Swagger.CzechPost.Model;

namespace IO.Swagger.CzechPost.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISendParcelsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get result of sendParcesls
        /// </summary>
        /// <remarks>
        /// Get the result of processing the submitted sendParcels information./ Operace slouží ke zjištění výsledku zpracování dat předaných prostřednictvím sendParcels.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ResultSendParcels</returns>
        ResultSendParcels GetSendParcels (string idTransaction);

        /// <summary>
        /// Get result of sendParcesls
        /// </summary>
        /// <remarks>
        /// Get the result of processing the submitted sendParcels information./ Operace slouží ke zjištění výsledku zpracování dat předaných prostřednictvím sendParcels.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ApiResponse of ResultSendParcels</returns>
        ApiResponse<ResultSendParcels> GetSendParcelsWithHttpInfo (string idTransaction);
        /// <summary>
        /// Get stats of sendParcesls
        /// </summary>
        /// <remarks>
        /// Get statistic informations about sendParcels datas. / Operace slouží ke zjištění statistických informací o datech předaných prostřednictvím operace sendParcels.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date from. / Datum od.</param>
        /// <param name="dateTo">Date from. / Datum od.</param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>StatsSendParcelsResponse</returns>
        StatsSendParcelsResponse GetStatsSendParcels (DateTime? dateFrom, DateTime? dateTo, string idContract = null);

        /// <summary>
        /// Get stats of sendParcesls
        /// </summary>
        /// <remarks>
        /// Get statistic informations about sendParcels datas. / Operace slouží ke zjištění statistických informací o datech předaných prostřednictvím operace sendParcels.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date from. / Datum od.</param>
        /// <param name="dateTo">Date from. / Datum od.</param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>ApiResponse of StatsSendParcelsResponse</returns>
        ApiResponse<StatsSendParcelsResponse> GetStatsSendParcelsWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, string idContract = null);
        /// <summary>
        /// Send Parcels.
        /// </summary>
        /// <remarks>
        /// Post data of sended parcels. Operation is used for send of parcels data to the processing. In case of successful process result, datas are atomatically obtainded to submitters post office. This accepted parcels are displayed on POL application website. In case of unsuccessful proces with some data mistakes, all the parcels are refused/unaccepted. Response of this operation is object AsncResponse with the uniqe ID (idTransaction), which is necessary for get the result of the processing. /  Operace slouží k předání dat k zásilkám do dalšího zpracování. V případě, že zpracování proběhlo úspěšně, jsou data automaticky předána na podací poštu. Takto přijatá data k zásilkám je možno zobrazit prostřednictvím web aplikace POL. V případě, že při zpracování byla zaznamenána chyba v datech, není do dalšího zpracování přijata ani jedna zásilka. Výstupem této operace je objekt AsyncResponse, který obsahuje jednoznačné ID (idTransaction) potřebné pro zjištění výsledku zpracování operace.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>AsyncResponse</returns>
        AsyncResponse PostSendParcels (SendParcelsRequest body, string idContract = null);

        /// <summary>
        /// Send Parcels.
        /// </summary>
        /// <remarks>
        /// Post data of sended parcels. Operation is used for send of parcels data to the processing. In case of successful process result, datas are atomatically obtainded to submitters post office. This accepted parcels are displayed on POL application website. In case of unsuccessful proces with some data mistakes, all the parcels are refused/unaccepted. Response of this operation is object AsncResponse with the uniqe ID (idTransaction), which is necessary for get the result of the processing. /  Operace slouží k předání dat k zásilkám do dalšího zpracování. V případě, že zpracování proběhlo úspěšně, jsou data automaticky předána na podací poštu. Takto přijatá data k zásilkám je možno zobrazit prostřednictvím web aplikace POL. V případě, že při zpracování byla zaznamenána chyba v datech, není do dalšího zpracování přijata ani jedna zásilka. Výstupem této operace je objekt AsyncResponse, který obsahuje jednoznačné ID (idTransaction) potřebné pro zjištění výsledku zpracování operace.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>ApiResponse of AsyncResponse</returns>
        ApiResponse<AsyncResponse> PostSendParcelsWithHttpInfo (SendParcelsRequest body, string idContract = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get result of sendParcesls
        /// </summary>
        /// <remarks>
        /// Get the result of processing the submitted sendParcels information./ Operace slouží ke zjištění výsledku zpracování dat předaných prostřednictvím sendParcels.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ResultSendParcels</returns>
        System.Threading.Tasks.Task<ResultSendParcels> GetSendParcelsAsync (string idTransaction);

        /// <summary>
        /// Get result of sendParcesls
        /// </summary>
        /// <remarks>
        /// Get the result of processing the submitted sendParcels information./ Operace slouží ke zjištění výsledku zpracování dat předaných prostřednictvím sendParcels.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ApiResponse (ResultSendParcels)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResultSendParcels>> GetSendParcelsAsyncWithHttpInfo (string idTransaction);
        /// <summary>
        /// Get stats of sendParcesls
        /// </summary>
        /// <remarks>
        /// Get statistic informations about sendParcels datas. / Operace slouží ke zjištění statistických informací o datech předaných prostřednictvím operace sendParcels.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date from. / Datum od.</param>
        /// <param name="dateTo">Date from. / Datum od.</param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>Task of StatsSendParcelsResponse</returns>
        System.Threading.Tasks.Task<StatsSendParcelsResponse> GetStatsSendParcelsAsync (DateTime? dateFrom, DateTime? dateTo, string idContract = null);

        /// <summary>
        /// Get stats of sendParcesls
        /// </summary>
        /// <remarks>
        /// Get statistic informations about sendParcels datas. / Operace slouží ke zjištění statistických informací o datech předaných prostřednictvím operace sendParcels.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date from. / Datum od.</param>
        /// <param name="dateTo">Date from. / Datum od.</param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>Task of ApiResponse (StatsSendParcelsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatsSendParcelsResponse>> GetStatsSendParcelsAsyncWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, string idContract = null);
        /// <summary>
        /// Send Parcels.
        /// </summary>
        /// <remarks>
        /// Post data of sended parcels. Operation is used for send of parcels data to the processing. In case of successful process result, datas are atomatically obtainded to submitters post office. This accepted parcels are displayed on POL application website. In case of unsuccessful proces with some data mistakes, all the parcels are refused/unaccepted. Response of this operation is object AsncResponse with the uniqe ID (idTransaction), which is necessary for get the result of the processing. /  Operace slouží k předání dat k zásilkám do dalšího zpracování. V případě, že zpracování proběhlo úspěšně, jsou data automaticky předána na podací poštu. Takto přijatá data k zásilkám je možno zobrazit prostřednictvím web aplikace POL. V případě, že při zpracování byla zaznamenána chyba v datech, není do dalšího zpracování přijata ani jedna zásilka. Výstupem této operace je objekt AsyncResponse, který obsahuje jednoznačné ID (idTransaction) potřebné pro zjištění výsledku zpracování operace.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>Task of AsyncResponse</returns>
        System.Threading.Tasks.Task<AsyncResponse> PostSendParcelsAsync (SendParcelsRequest body, string idContract = null);

        /// <summary>
        /// Send Parcels.
        /// </summary>
        /// <remarks>
        /// Post data of sended parcels. Operation is used for send of parcels data to the processing. In case of successful process result, datas are atomatically obtainded to submitters post office. This accepted parcels are displayed on POL application website. In case of unsuccessful proces with some data mistakes, all the parcels are refused/unaccepted. Response of this operation is object AsncResponse with the uniqe ID (idTransaction), which is necessary for get the result of the processing. /  Operace slouží k předání dat k zásilkám do dalšího zpracování. V případě, že zpracování proběhlo úspěšně, jsou data automaticky předána na podací poštu. Takto přijatá data k zásilkám je možno zobrazit prostřednictvím web aplikace POL. V případě, že při zpracování byla zaznamenána chyba v datech, není do dalšího zpracování přijata ani jedna zásilka. Výstupem této operace je objekt AsyncResponse, který obsahuje jednoznačné ID (idTransaction) potřebné pro zjištění výsledku zpracování operace.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>Task of ApiResponse (AsyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsyncResponse>> PostSendParcelsAsyncWithHttpInfo (SendParcelsRequest body, string idContract = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SendParcelsApi : ISendParcelsApi
    {
        private IO.Swagger.CzechPost.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SendParcelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SendParcelsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.CzechPost.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.CzechPost.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendParcelsApi"/> class
        /// </summary>
        /// <returns></returns>
        public SendParcelsApi()
        {
            this.Configuration = IO.Swagger.CzechPost.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.CzechPost.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SendParcelsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SendParcelsApi(IO.Swagger.CzechPost.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.CzechPost.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.CzechPost.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.CzechPost.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.CzechPost.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get result of sendParcesls Get the result of processing the submitted sendParcels information./ Operace slouží ke zjištění výsledku zpracování dat předaných prostřednictvím sendParcels.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ResultSendParcels</returns>
        public ResultSendParcels GetSendParcels (string idTransaction)
        {
             ApiResponse<ResultSendParcels> localVarResponse = GetSendParcelsWithHttpInfo(idTransaction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get result of sendParcesls Get the result of processing the submitted sendParcels information./ Operace slouží ke zjištění výsledku zpracování dat předaných prostřednictvím sendParcels.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ApiResponse of ResultSendParcels</returns>
        public ApiResponse< ResultSendParcels > GetSendParcelsWithHttpInfo (string idTransaction)
        {
            // verify the required parameter 'idTransaction' is set
            if (idTransaction == null)
                throw new ApiException(400, "Missing required parameter 'idTransaction' when calling SendParcelsApi->GetSendParcels");

            var localVarPath = "/sendParcels/idTransaction/{idTransaction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idTransaction != null) localVarPathParams.Add("idTransaction", this.Configuration.ApiClient.ParameterToString(idTransaction)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSendParcels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSendParcels>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResultSendParcels) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSendParcels)));
        }

        /// <summary>
        /// Get result of sendParcesls Get the result of processing the submitted sendParcels information./ Operace slouží ke zjištění výsledku zpracování dat předaných prostřednictvím sendParcels.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ResultSendParcels</returns>
        public async System.Threading.Tasks.Task<ResultSendParcels> GetSendParcelsAsync (string idTransaction)
        {
             ApiResponse<ResultSendParcels> localVarResponse = await GetSendParcelsAsyncWithHttpInfo(idTransaction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get result of sendParcesls Get the result of processing the submitted sendParcels information./ Operace slouží ke zjištění výsledku zpracování dat předaných prostřednictvím sendParcels.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ApiResponse (ResultSendParcels)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResultSendParcels>> GetSendParcelsAsyncWithHttpInfo (string idTransaction)
        {
            // verify the required parameter 'idTransaction' is set
            if (idTransaction == null)
                throw new ApiException(400, "Missing required parameter 'idTransaction' when calling SendParcelsApi->GetSendParcels");

            var localVarPath = "/sendParcels/idTransaction/{idTransaction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idTransaction != null) localVarPathParams.Add("idTransaction", this.Configuration.ApiClient.ParameterToString(idTransaction)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSendParcels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResultSendParcels>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResultSendParcels) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResultSendParcels)));
        }

        /// <summary>
        /// Get stats of sendParcesls Get statistic informations about sendParcels datas. / Operace slouží ke zjištění statistických informací o datech předaných prostřednictvím operace sendParcels.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date from. / Datum od.</param>
        /// <param name="dateTo">Date from. / Datum od.</param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>StatsSendParcelsResponse</returns>
        public StatsSendParcelsResponse GetStatsSendParcels (DateTime? dateFrom, DateTime? dateTo, string idContract = null)
        {
             ApiResponse<StatsSendParcelsResponse> localVarResponse = GetStatsSendParcelsWithHttpInfo(dateFrom, dateTo, idContract);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get stats of sendParcesls Get statistic informations about sendParcels datas. / Operace slouží ke zjištění statistických informací o datech předaných prostřednictvím operace sendParcels.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date from. / Datum od.</param>
        /// <param name="dateTo">Date from. / Datum od.</param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>ApiResponse of StatsSendParcelsResponse</returns>
        public ApiResponse< StatsSendParcelsResponse > GetStatsSendParcelsWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, string idContract = null)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling SendParcelsApi->GetStatsSendParcels");
            // verify the required parameter 'dateTo' is set
            if (dateTo == null)
                throw new ApiException(400, "Missing required parameter 'dateTo' when calling SendParcelsApi->GetStatsSendParcels");

            var localVarPath = "/sendParcels/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idContract != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idContract", idContract)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatsSendParcels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatsSendParcelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StatsSendParcelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatsSendParcelsResponse)));
        }

        /// <summary>
        /// Get stats of sendParcesls Get statistic informations about sendParcels datas. / Operace slouží ke zjištění statistických informací o datech předaných prostřednictvím operace sendParcels.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date from. / Datum od.</param>
        /// <param name="dateTo">Date from. / Datum od.</param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>Task of StatsSendParcelsResponse</returns>
        public async System.Threading.Tasks.Task<StatsSendParcelsResponse> GetStatsSendParcelsAsync (DateTime? dateFrom, DateTime? dateTo, string idContract = null)
        {
             ApiResponse<StatsSendParcelsResponse> localVarResponse = await GetStatsSendParcelsAsyncWithHttpInfo(dateFrom, dateTo, idContract);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get stats of sendParcesls Get statistic informations about sendParcels datas. / Operace slouží ke zjištění statistických informací o datech předaných prostřednictvím operace sendParcels.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date from. / Datum od.</param>
        /// <param name="dateTo">Date from. / Datum od.</param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>Task of ApiResponse (StatsSendParcelsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatsSendParcelsResponse>> GetStatsSendParcelsAsyncWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, string idContract = null)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling SendParcelsApi->GetStatsSendParcels");
            // verify the required parameter 'dateTo' is set
            if (dateTo == null)
                throw new ApiException(400, "Missing required parameter 'dateTo' when calling SendParcelsApi->GetStatsSendParcels");

            var localVarPath = "/sendParcels/stats";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idContract != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idContract", idContract)); // query parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dateTo", dateTo)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatsSendParcels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatsSendParcelsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StatsSendParcelsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatsSendParcelsResponse)));
        }

        /// <summary>
        /// Send Parcels. Post data of sended parcels. Operation is used for send of parcels data to the processing. In case of successful process result, datas are atomatically obtainded to submitters post office. This accepted parcels are displayed on POL application website. In case of unsuccessful proces with some data mistakes, all the parcels are refused/unaccepted. Response of this operation is object AsncResponse with the uniqe ID (idTransaction), which is necessary for get the result of the processing. /  Operace slouží k předání dat k zásilkám do dalšího zpracování. V případě, že zpracování proběhlo úspěšně, jsou data automaticky předána na podací poštu. Takto přijatá data k zásilkám je možno zobrazit prostřednictvím web aplikace POL. V případě, že při zpracování byla zaznamenána chyba v datech, není do dalšího zpracování přijata ani jedna zásilka. Výstupem této operace je objekt AsyncResponse, který obsahuje jednoznačné ID (idTransaction) potřebné pro zjištění výsledku zpracování operace.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>AsyncResponse</returns>
        public AsyncResponse PostSendParcels (SendParcelsRequest body, string idContract = null)
        {
             ApiResponse<AsyncResponse> localVarResponse = PostSendParcelsWithHttpInfo(body, idContract);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send Parcels. Post data of sended parcels. Operation is used for send of parcels data to the processing. In case of successful process result, datas are atomatically obtainded to submitters post office. This accepted parcels are displayed on POL application website. In case of unsuccessful proces with some data mistakes, all the parcels are refused/unaccepted. Response of this operation is object AsncResponse with the uniqe ID (idTransaction), which is necessary for get the result of the processing. /  Operace slouží k předání dat k zásilkám do dalšího zpracování. V případě, že zpracování proběhlo úspěšně, jsou data automaticky předána na podací poštu. Takto přijatá data k zásilkám je možno zobrazit prostřednictvím web aplikace POL. V případě, že při zpracování byla zaznamenána chyba v datech, není do dalšího zpracování přijata ani jedna zásilka. Výstupem této operace je objekt AsyncResponse, který obsahuje jednoznačné ID (idTransaction) potřebné pro zjištění výsledku zpracování operace.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>ApiResponse of AsyncResponse</returns>
        public ApiResponse< AsyncResponse > PostSendParcelsWithHttpInfo (SendParcelsRequest body, string idContract = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SendParcelsApi->PostSendParcels");

            var localVarPath = "/sendParcels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idContract != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idContract", idContract)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (Authorization-content-SHA256) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Content-SHA256")))
            {
                localVarHeaderParams["Authorization-Content-SHA256"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Content-SHA256");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSendParcels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncResponse)));
        }

        /// <summary>
        /// Send Parcels. Post data of sended parcels. Operation is used for send of parcels data to the processing. In case of successful process result, datas are atomatically obtainded to submitters post office. This accepted parcels are displayed on POL application website. In case of unsuccessful proces with some data mistakes, all the parcels are refused/unaccepted. Response of this operation is object AsncResponse with the uniqe ID (idTransaction), which is necessary for get the result of the processing. /  Operace slouží k předání dat k zásilkám do dalšího zpracování. V případě, že zpracování proběhlo úspěšně, jsou data automaticky předána na podací poštu. Takto přijatá data k zásilkám je možno zobrazit prostřednictvím web aplikace POL. V případě, že při zpracování byla zaznamenána chyba v datech, není do dalšího zpracování přijata ani jedna zásilka. Výstupem této operace je objekt AsyncResponse, který obsahuje jednoznačné ID (idTransaction) potřebné pro zjištění výsledku zpracování operace.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>Task of AsyncResponse</returns>
        public async System.Threading.Tasks.Task<AsyncResponse> PostSendParcelsAsync (SendParcelsRequest body, string idContract = null)
        {
             ApiResponse<AsyncResponse> localVarResponse = await PostSendParcelsAsyncWithHttpInfo(body, idContract);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send Parcels. Post data of sended parcels. Operation is used for send of parcels data to the processing. In case of successful process result, datas are atomatically obtainded to submitters post office. This accepted parcels are displayed on POL application website. In case of unsuccessful proces with some data mistakes, all the parcels are refused/unaccepted. Response of this operation is object AsncResponse with the uniqe ID (idTransaction), which is necessary for get the result of the processing. /  Operace slouží k předání dat k zásilkám do dalšího zpracování. V případě, že zpracování proběhlo úspěšně, jsou data automaticky předána na podací poštu. Takto přijatá data k zásilkám je možno zobrazit prostřednictvím web aplikace POL. V případě, že při zpracování byla zaznamenána chyba v datech, není do dalšího zpracování přijata ani jedna zásilka. Výstupem této operace je objekt AsyncResponse, který obsahuje jednoznačné ID (idTransaction) potřebné pro zjištění výsledku zpracování operace.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="idContract">ID CCK of submitter. In case of non-completion, the submitter is the caller./ ID CČK složky podavatele. V případě nevyplnění, je podavatelem volající. (optional)</param>
        /// <returns>Task of ApiResponse (AsyncResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsyncResponse>> PostSendParcelsAsyncWithHttpInfo (SendParcelsRequest body, string idContract = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SendParcelsApi->PostSendParcels");

            var localVarPath = "/sendParcels";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idContract != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idContract", idContract)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (Authorization-content-SHA256) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Content-SHA256")))
            {
                localVarHeaderParams["Authorization-Content-SHA256"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Content-SHA256");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSendParcels", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncResponse)));
        }

    }
}
