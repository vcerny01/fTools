/* 
 * B2B-ZSKService
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.CzechPost.Client;
using IO.Swagger.CzechPost.Model;

namespace IO.Swagger.CzechPost.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IReportsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get info about submitted consignments
        /// </summary>
        /// <remarks>
        /// Get the info about submitted consignments - search by given period. / Předá informace o podaných zásilkách - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <param name="prefix">Filter by prefix of the consignments. / Filtr přes prefix zásilek. (optional)</param>
        /// <returns>AsyncResponse</returns>
        AsyncResponse GetInfoSubmittedConsignments (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null, string prefix = null);

        /// <summary>
        /// Get info about submitted consignments
        /// </summary>
        /// <remarks>
        /// Get the info about submitted consignments - search by given period. / Předá informace o podaných zásilkách - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <param name="prefix">Filter by prefix of the consignments. / Filtr přes prefix zásilek. (optional)</param>
        /// <returns>ApiResponse of AsyncResponse</returns>
        ApiResponse<AsyncResponse> GetInfoSubmittedConsignmentsWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null, string prefix = null);
        /// <summary>
        /// Get consignments info by period
        /// </summary>
        /// <remarks>
        /// Get of the status and informations of the consignments given by B2B - search by given period. / Předá stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date. / Datum.</param>
        /// <param name="timeFrom">Time FROM. / Čas DO. (optional)</param>
        /// <param name="timeTo">Time TO. / Čas DO. (optional)</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>AsyncResponse</returns>
        AsyncResponse GetParcelStatusesB2BPeriod (DateTime? date, string timeFrom = null, string timeTo = null, string idContract = null, string customerID = null);

        /// <summary>
        /// Get consignments info by period
        /// </summary>
        /// <remarks>
        /// Get of the status and informations of the consignments given by B2B - search by given period. / Předá stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date. / Datum.</param>
        /// <param name="timeFrom">Time FROM. / Čas DO. (optional)</param>
        /// <param name="timeTo">Time TO. / Čas DO. (optional)</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>ApiResponse of AsyncResponse</returns>
        ApiResponse<AsyncResponse> GetParcelStatusesB2BPeriodWithHttpInfo (DateTime? date, string timeFrom = null, string timeTo = null, string idContract = null, string customerID = null);
        /// <summary>
        /// Get result of request of consignment info by period
        /// </summary>
        /// <remarks>
        /// Get the result of request of the status and informations of the consignments given by B2B - search by given period. / Předá výsledek požadavku na stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ParcelInfoPeriodResponse</returns>
        ParcelInfoPeriodResponse GetParcelStatusesB2BPeriodResult (string idTransaction);

        /// <summary>
        /// Get result of request of consignment info by period
        /// </summary>
        /// <remarks>
        /// Get the result of request of the status and informations of the consignments given by B2B - search by given period. / Předá výsledek požadavku na stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ApiResponse of ParcelInfoPeriodResponse</returns>
        ApiResponse<ParcelInfoPeriodResponse> GetParcelStatusesB2BPeriodResultWithHttpInfo (string idTransaction);
        /// <summary>
        /// Get consignments current status by period
        /// </summary>
        /// <remarks>
        /// Get the current status of the consignments - search by given period. / Předá aktuální stav zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>AsyncResponse</returns>
        AsyncResponse GetParcelStatusesCurrentPeriod (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null);

        /// <summary>
        /// Get consignments current status by period
        /// </summary>
        /// <remarks>
        /// Get the current status of the consignments - search by given period. / Předá aktuální stav zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>ApiResponse of AsyncResponse</returns>
        ApiResponse<AsyncResponse> GetParcelStatusesCurrentPeriodWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null);
        /// <summary>
        /// Get result of request of consignment info by period
        /// </summary>
        /// <remarks>
        /// Get the result of request of the current status of the consignments - search by given period. / Předá výsledek požadavku na aktuální stav zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ParcelStatusCurrentListResponse</returns>
        ParcelStatusCurrentListResponse GetParcelStatusesCurrentPeriodResult (string idTransaction);

        /// <summary>
        /// Get result of request of consignment info by period
        /// </summary>
        /// <remarks>
        /// Get the result of request of the current status of the consignments - search by given period. / Předá výsledek požadavku na aktuální stav zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ApiResponse of ParcelStatusCurrentListResponse</returns>
        ApiResponse<ParcelStatusCurrentListResponse> GetParcelStatusesCurrentPeriodResultWithHttpInfo (string idTransaction);
        /// <summary>
        /// Get result of request of submitted consignments by period
        /// </summary>
        /// <remarks>
        /// Get the result of requested info about quality of submitted consignments - search by given period. / Předá výsledek požadavku o informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>QualityResponse</returns>
        QualityResponse GetQualityResult (string idTransaction);

        /// <summary>
        /// Get result of request of submitted consignments by period
        /// </summary>
        /// <remarks>
        /// Get the result of requested info about quality of submitted consignments - search by given period. / Předá výsledek požadavku o informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ApiResponse of QualityResponse</returns>
        ApiResponse<QualityResponse> GetQualityResultWithHttpInfo (string idTransaction);
        /// <summary>
        /// Get info about quality of submitted consignments
        /// </summary>
        /// <remarks>
        /// Get the info about quality of submitted consignments - search by given period. / Předá informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date FROM. / Datum OD.</param>
        /// <param name="dateTo">Date TO. / Datum DO.</param>
        /// <param name="catError">Error category. True - with errors / false - without errors. / Kategorie chyby. True - s chybami / false - bez chyb.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>AsyncResponse</returns>
        AsyncResponse GetResultQuality (DateTime? dateFrom, DateTime? dateTo, bool? catError, string idContract = null, string customerID = null);

        /// <summary>
        /// Get info about quality of submitted consignments
        /// </summary>
        /// <remarks>
        /// Get the info about quality of submitted consignments - search by given period. / Předá informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date FROM. / Datum OD.</param>
        /// <param name="dateTo">Date TO. / Datum DO.</param>
        /// <param name="catError">Error category. True - with errors / false - without errors. / Kategorie chyby. True - s chybami / false - bez chyb.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>ApiResponse of AsyncResponse</returns>
        ApiResponse<AsyncResponse> GetResultQualityWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, bool? catError, string idContract = null, string customerID = null);
        /// <summary>
        /// Get result of request of submitted consignments by period
        /// </summary>
        /// <remarks>
        /// Get the result of requested info about submitted consignments - search by given period. / Předá výsledek požadavku o informace o podaných zásilkách - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>SubmittedConsignmentsResponse</returns>
        SubmittedConsignmentsResponse GetSubmittedConsignmentResult (string idTransaction);

        /// <summary>
        /// Get result of request of submitted consignments by period
        /// </summary>
        /// <remarks>
        /// Get the result of requested info about submitted consignments - search by given period. / Předá výsledek požadavku o informace o podaných zásilkách - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ApiResponse of SubmittedConsignmentsResponse</returns>
        ApiResponse<SubmittedConsignmentsResponse> GetSubmittedConsignmentResultWithHttpInfo (string idTransaction);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get info about submitted consignments
        /// </summary>
        /// <remarks>
        /// Get the info about submitted consignments - search by given period. / Předá informace o podaných zásilkách - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <param name="prefix">Filter by prefix of the consignments. / Filtr přes prefix zásilek. (optional)</param>
        /// <returns>Task of AsyncResponse</returns>
        System.Threading.Tasks.Task<AsyncResponse> GetInfoSubmittedConsignmentsAsync (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null, string prefix = null);

        /// <summary>
        /// Get info about submitted consignments
        /// </summary>
        /// <remarks>
        /// Get the info about submitted consignments - search by given period. / Předá informace o podaných zásilkách - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <param name="prefix">Filter by prefix of the consignments. / Filtr přes prefix zásilek. (optional)</param>
        /// <returns>Task of ApiResponse (AsyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsyncResponse>> GetInfoSubmittedConsignmentsAsyncWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null, string prefix = null);
        /// <summary>
        /// Get consignments info by period
        /// </summary>
        /// <remarks>
        /// Get of the status and informations of the consignments given by B2B - search by given period. / Předá stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date. / Datum.</param>
        /// <param name="timeFrom">Time FROM. / Čas DO. (optional)</param>
        /// <param name="timeTo">Time TO. / Čas DO. (optional)</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>Task of AsyncResponse</returns>
        System.Threading.Tasks.Task<AsyncResponse> GetParcelStatusesB2BPeriodAsync (DateTime? date, string timeFrom = null, string timeTo = null, string idContract = null, string customerID = null);

        /// <summary>
        /// Get consignments info by period
        /// </summary>
        /// <remarks>
        /// Get of the status and informations of the consignments given by B2B - search by given period. / Předá stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date. / Datum.</param>
        /// <param name="timeFrom">Time FROM. / Čas DO. (optional)</param>
        /// <param name="timeTo">Time TO. / Čas DO. (optional)</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>Task of ApiResponse (AsyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsyncResponse>> GetParcelStatusesB2BPeriodAsyncWithHttpInfo (DateTime? date, string timeFrom = null, string timeTo = null, string idContract = null, string customerID = null);
        /// <summary>
        /// Get result of request of consignment info by period
        /// </summary>
        /// <remarks>
        /// Get the result of request of the status and informations of the consignments given by B2B - search by given period. / Předá výsledek požadavku na stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ParcelInfoPeriodResponse</returns>
        System.Threading.Tasks.Task<ParcelInfoPeriodResponse> GetParcelStatusesB2BPeriodResultAsync (string idTransaction);

        /// <summary>
        /// Get result of request of consignment info by period
        /// </summary>
        /// <remarks>
        /// Get the result of request of the status and informations of the consignments given by B2B - search by given period. / Předá výsledek požadavku na stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ApiResponse (ParcelInfoPeriodResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParcelInfoPeriodResponse>> GetParcelStatusesB2BPeriodResultAsyncWithHttpInfo (string idTransaction);
        /// <summary>
        /// Get consignments current status by period
        /// </summary>
        /// <remarks>
        /// Get the current status of the consignments - search by given period. / Předá aktuální stav zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>Task of AsyncResponse</returns>
        System.Threading.Tasks.Task<AsyncResponse> GetParcelStatusesCurrentPeriodAsync (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null);

        /// <summary>
        /// Get consignments current status by period
        /// </summary>
        /// <remarks>
        /// Get the current status of the consignments - search by given period. / Předá aktuální stav zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>Task of ApiResponse (AsyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsyncResponse>> GetParcelStatusesCurrentPeriodAsyncWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null);
        /// <summary>
        /// Get result of request of consignment info by period
        /// </summary>
        /// <remarks>
        /// Get the result of request of the current status of the consignments - search by given period. / Předá výsledek požadavku na aktuální stav zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ParcelStatusCurrentListResponse</returns>
        System.Threading.Tasks.Task<ParcelStatusCurrentListResponse> GetParcelStatusesCurrentPeriodResultAsync (string idTransaction);

        /// <summary>
        /// Get result of request of consignment info by period
        /// </summary>
        /// <remarks>
        /// Get the result of request of the current status of the consignments - search by given period. / Předá výsledek požadavku na aktuální stav zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ApiResponse (ParcelStatusCurrentListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ParcelStatusCurrentListResponse>> GetParcelStatusesCurrentPeriodResultAsyncWithHttpInfo (string idTransaction);
        /// <summary>
        /// Get result of request of submitted consignments by period
        /// </summary>
        /// <remarks>
        /// Get the result of requested info about quality of submitted consignments - search by given period. / Předá výsledek požadavku o informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of QualityResponse</returns>
        System.Threading.Tasks.Task<QualityResponse> GetQualityResultAsync (string idTransaction);

        /// <summary>
        /// Get result of request of submitted consignments by period
        /// </summary>
        /// <remarks>
        /// Get the result of requested info about quality of submitted consignments - search by given period. / Předá výsledek požadavku o informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ApiResponse (QualityResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<QualityResponse>> GetQualityResultAsyncWithHttpInfo (string idTransaction);
        /// <summary>
        /// Get info about quality of submitted consignments
        /// </summary>
        /// <remarks>
        /// Get the info about quality of submitted consignments - search by given period. / Předá informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date FROM. / Datum OD.</param>
        /// <param name="dateTo">Date TO. / Datum DO.</param>
        /// <param name="catError">Error category. True - with errors / false - without errors. / Kategorie chyby. True - s chybami / false - bez chyb.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>Task of AsyncResponse</returns>
        System.Threading.Tasks.Task<AsyncResponse> GetResultQualityAsync (DateTime? dateFrom, DateTime? dateTo, bool? catError, string idContract = null, string customerID = null);

        /// <summary>
        /// Get info about quality of submitted consignments
        /// </summary>
        /// <remarks>
        /// Get the info about quality of submitted consignments - search by given period. / Předá informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date FROM. / Datum OD.</param>
        /// <param name="dateTo">Date TO. / Datum DO.</param>
        /// <param name="catError">Error category. True - with errors / false - without errors. / Kategorie chyby. True - s chybami / false - bez chyb.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>Task of ApiResponse (AsyncResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<AsyncResponse>> GetResultQualityAsyncWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, bool? catError, string idContract = null, string customerID = null);
        /// <summary>
        /// Get result of request of submitted consignments by period
        /// </summary>
        /// <remarks>
        /// Get the result of requested info about submitted consignments - search by given period. / Předá výsledek požadavku o informace o podaných zásilkách - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of SubmittedConsignmentsResponse</returns>
        System.Threading.Tasks.Task<SubmittedConsignmentsResponse> GetSubmittedConsignmentResultAsync (string idTransaction);

        /// <summary>
        /// Get result of request of submitted consignments by period
        /// </summary>
        /// <remarks>
        /// Get the result of requested info about submitted consignments - search by given period. / Předá výsledek požadavku o informace o podaných zásilkách - vyhledání dle daného období.
        /// </remarks>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ApiResponse (SubmittedConsignmentsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SubmittedConsignmentsResponse>> GetSubmittedConsignmentResultAsyncWithHttpInfo (string idTransaction);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class ReportsApi : IReportsApi
    {
        private IO.Swagger.CzechPost.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReportsApi(String basePath)
        {
            this.Configuration = new IO.Swagger.CzechPost.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.CzechPost.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ReportsApi()
        {
            this.Configuration = IO.Swagger.CzechPost.Client.Configuration.Default;

            ExceptionFactory = IO.Swagger.CzechPost.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReportsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReportsApi(IO.Swagger.CzechPost.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.CzechPost.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.CzechPost.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.CzechPost.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.CzechPost.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get info about submitted consignments Get the info about submitted consignments - search by given period. / Předá informace o podaných zásilkách - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <param name="prefix">Filter by prefix of the consignments. / Filtr přes prefix zásilek. (optional)</param>
        /// <returns>AsyncResponse</returns>
        public AsyncResponse GetInfoSubmittedConsignments (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null, string prefix = null)
        {
             ApiResponse<AsyncResponse> localVarResponse = GetInfoSubmittedConsignmentsWithHttpInfo(dateFrom, dateTo, idContract, customerID, prefix);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get info about submitted consignments Get the info about submitted consignments - search by given period. / Předá informace o podaných zásilkách - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <param name="prefix">Filter by prefix of the consignments. / Filtr přes prefix zásilek. (optional)</param>
        /// <returns>ApiResponse of AsyncResponse</returns>
        public ApiResponse< AsyncResponse > GetInfoSubmittedConsignmentsWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null, string prefix = null)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling ReportsApi->GetInfoSubmittedConsignments");
            // verify the required parameter 'dateTo' is set
            if (dateTo == null)
                throw new ApiException(400, "Missing required parameter 'dateTo' when calling ReportsApi->GetInfoSubmittedConsignments");

            var localVarPath = "/report/submittedConsignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DateTo", dateTo)); // query parameter
            if (idContract != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idContract", idContract)); // query parameter
            if (customerID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerID", customerID)); // query parameter
            if (prefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prefix", prefix)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInfoSubmittedConsignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncResponse)));
        }

        /// <summary>
        /// Get info about submitted consignments Get the info about submitted consignments - search by given period. / Předá informace o podaných zásilkách - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <param name="prefix">Filter by prefix of the consignments. / Filtr přes prefix zásilek. (optional)</param>
        /// <returns>Task of AsyncResponse</returns>
        public async System.Threading.Tasks.Task<AsyncResponse> GetInfoSubmittedConsignmentsAsync (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null, string prefix = null)
        {
             ApiResponse<AsyncResponse> localVarResponse = await GetInfoSubmittedConsignmentsAsyncWithHttpInfo(dateFrom, dateTo, idContract, customerID, prefix);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get info about submitted consignments Get the info about submitted consignments - search by given period. / Předá informace o podaných zásilkách - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <param name="prefix">Filter by prefix of the consignments. / Filtr přes prefix zásilek. (optional)</param>
        /// <returns>Task of ApiResponse (AsyncResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsyncResponse>> GetInfoSubmittedConsignmentsAsyncWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null, string prefix = null)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling ReportsApi->GetInfoSubmittedConsignments");
            // verify the required parameter 'dateTo' is set
            if (dateTo == null)
                throw new ApiException(400, "Missing required parameter 'dateTo' when calling ReportsApi->GetInfoSubmittedConsignments");

            var localVarPath = "/report/submittedConsignments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DateTo", dateTo)); // query parameter
            if (idContract != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idContract", idContract)); // query parameter
            if (customerID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerID", customerID)); // query parameter
            if (prefix != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "prefix", prefix)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInfoSubmittedConsignments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncResponse)));
        }

        /// <summary>
        /// Get consignments info by period Get of the status and informations of the consignments given by B2B - search by given period. / Předá stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date. / Datum.</param>
        /// <param name="timeFrom">Time FROM. / Čas DO. (optional)</param>
        /// <param name="timeTo">Time TO. / Čas DO. (optional)</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>AsyncResponse</returns>
        public AsyncResponse GetParcelStatusesB2BPeriod (DateTime? date, string timeFrom = null, string timeTo = null, string idContract = null, string customerID = null)
        {
             ApiResponse<AsyncResponse> localVarResponse = GetParcelStatusesB2BPeriodWithHttpInfo(date, timeFrom, timeTo, idContract, customerID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get consignments info by period Get of the status and informations of the consignments given by B2B - search by given period. / Předá stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date. / Datum.</param>
        /// <param name="timeFrom">Time FROM. / Čas DO. (optional)</param>
        /// <param name="timeTo">Time TO. / Čas DO. (optional)</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>ApiResponse of AsyncResponse</returns>
        public ApiResponse< AsyncResponse > GetParcelStatusesB2BPeriodWithHttpInfo (DateTime? date, string timeFrom = null, string timeTo = null, string idContract = null, string customerID = null)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling ReportsApi->GetParcelStatusesB2BPeriod");

            var localVarPath = "/report/parcelStatusesB2B/period";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Date", date)); // query parameter
            if (timeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimeFrom", timeFrom)); // query parameter
            if (timeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimeTo", timeTo)); // query parameter
            if (idContract != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idContract", idContract)); // query parameter
            if (customerID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerID", customerID)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelStatusesB2BPeriod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncResponse)));
        }

        /// <summary>
        /// Get consignments info by period Get of the status and informations of the consignments given by B2B - search by given period. / Předá stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date. / Datum.</param>
        /// <param name="timeFrom">Time FROM. / Čas DO. (optional)</param>
        /// <param name="timeTo">Time TO. / Čas DO. (optional)</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>Task of AsyncResponse</returns>
        public async System.Threading.Tasks.Task<AsyncResponse> GetParcelStatusesB2BPeriodAsync (DateTime? date, string timeFrom = null, string timeTo = null, string idContract = null, string customerID = null)
        {
             ApiResponse<AsyncResponse> localVarResponse = await GetParcelStatusesB2BPeriodAsyncWithHttpInfo(date, timeFrom, timeTo, idContract, customerID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get consignments info by period Get of the status and informations of the consignments given by B2B - search by given period. / Předá stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="date">Date. / Datum.</param>
        /// <param name="timeFrom">Time FROM. / Čas DO. (optional)</param>
        /// <param name="timeTo">Time TO. / Čas DO. (optional)</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>Task of ApiResponse (AsyncResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsyncResponse>> GetParcelStatusesB2BPeriodAsyncWithHttpInfo (DateTime? date, string timeFrom = null, string timeTo = null, string idContract = null, string customerID = null)
        {
            // verify the required parameter 'date' is set
            if (date == null)
                throw new ApiException(400, "Missing required parameter 'date' when calling ReportsApi->GetParcelStatusesB2BPeriod");

            var localVarPath = "/report/parcelStatusesB2B/period";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (date != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "Date", date)); // query parameter
            if (timeFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimeFrom", timeFrom)); // query parameter
            if (timeTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "TimeTo", timeTo)); // query parameter
            if (idContract != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idContract", idContract)); // query parameter
            if (customerID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerID", customerID)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelStatusesB2BPeriod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncResponse)));
        }

        /// <summary>
        /// Get result of request of consignment info by period Get the result of request of the status and informations of the consignments given by B2B - search by given period. / Předá výsledek požadavku na stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ParcelInfoPeriodResponse</returns>
        public ParcelInfoPeriodResponse GetParcelStatusesB2BPeriodResult (string idTransaction)
        {
             ApiResponse<ParcelInfoPeriodResponse> localVarResponse = GetParcelStatusesB2BPeriodResultWithHttpInfo(idTransaction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get result of request of consignment info by period Get the result of request of the status and informations of the consignments given by B2B - search by given period. / Předá výsledek požadavku na stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ApiResponse of ParcelInfoPeriodResponse</returns>
        public ApiResponse< ParcelInfoPeriodResponse > GetParcelStatusesB2BPeriodResultWithHttpInfo (string idTransaction)
        {
            // verify the required parameter 'idTransaction' is set
            if (idTransaction == null)
                throw new ApiException(400, "Missing required parameter 'idTransaction' when calling ReportsApi->GetParcelStatusesB2BPeriodResult");

            var localVarPath = "/result/parcelStatusesB2B/period/{idTransaction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idTransaction != null) localVarPathParams.Add("idTransaction", this.Configuration.ApiClient.ParameterToString(idTransaction)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelStatusesB2BPeriodResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelInfoPeriodResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ParcelInfoPeriodResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelInfoPeriodResponse)));
        }

        /// <summary>
        /// Get result of request of consignment info by period Get the result of request of the status and informations of the consignments given by B2B - search by given period. / Předá výsledek požadavku na stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ParcelInfoPeriodResponse</returns>
        public async System.Threading.Tasks.Task<ParcelInfoPeriodResponse> GetParcelStatusesB2BPeriodResultAsync (string idTransaction)
        {
             ApiResponse<ParcelInfoPeriodResponse> localVarResponse = await GetParcelStatusesB2BPeriodResultAsyncWithHttpInfo(idTransaction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get result of request of consignment info by period Get the result of request of the status and informations of the consignments given by B2B - search by given period. / Předá výsledek požadavku na stav a informace o zásilkách předaných přes B2B - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ApiResponse (ParcelInfoPeriodResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ParcelInfoPeriodResponse>> GetParcelStatusesB2BPeriodResultAsyncWithHttpInfo (string idTransaction)
        {
            // verify the required parameter 'idTransaction' is set
            if (idTransaction == null)
                throw new ApiException(400, "Missing required parameter 'idTransaction' when calling ReportsApi->GetParcelStatusesB2BPeriodResult");

            var localVarPath = "/result/parcelStatusesB2B/period/{idTransaction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idTransaction != null) localVarPathParams.Add("idTransaction", this.Configuration.ApiClient.ParameterToString(idTransaction)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelStatusesB2BPeriodResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelInfoPeriodResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ParcelInfoPeriodResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelInfoPeriodResponse)));
        }

        /// <summary>
        /// Get consignments current status by period Get the current status of the consignments - search by given period. / Předá aktuální stav zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>AsyncResponse</returns>
        public AsyncResponse GetParcelStatusesCurrentPeriod (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null)
        {
             ApiResponse<AsyncResponse> localVarResponse = GetParcelStatusesCurrentPeriodWithHttpInfo(dateFrom, dateTo, idContract, customerID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get consignments current status by period Get the current status of the consignments - search by given period. / Předá aktuální stav zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>ApiResponse of AsyncResponse</returns>
        public ApiResponse< AsyncResponse > GetParcelStatusesCurrentPeriodWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling ReportsApi->GetParcelStatusesCurrentPeriod");
            // verify the required parameter 'dateTo' is set
            if (dateTo == null)
                throw new ApiException(400, "Missing required parameter 'dateTo' when calling ReportsApi->GetParcelStatusesCurrentPeriod");

            var localVarPath = "/report/parcelStatuses/current/period";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DateTo", dateTo)); // query parameter
            if (idContract != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idContract", idContract)); // query parameter
            if (customerID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerID", customerID)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelStatusesCurrentPeriod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncResponse)));
        }

        /// <summary>
        /// Get consignments current status by period Get the current status of the consignments - search by given period. / Předá aktuální stav zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>Task of AsyncResponse</returns>
        public async System.Threading.Tasks.Task<AsyncResponse> GetParcelStatusesCurrentPeriodAsync (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null)
        {
             ApiResponse<AsyncResponse> localVarResponse = await GetParcelStatusesCurrentPeriodAsyncWithHttpInfo(dateFrom, dateTo, idContract, customerID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get consignments current status by period Get the current status of the consignments - search by given period. / Předá aktuální stav zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Datetime FROM. / Datum OD.</param>
        /// <param name="dateTo">Datetime TO. / Datum DO.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>Task of ApiResponse (AsyncResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsyncResponse>> GetParcelStatusesCurrentPeriodAsyncWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, string idContract = null, string customerID = null)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling ReportsApi->GetParcelStatusesCurrentPeriod");
            // verify the required parameter 'dateTo' is set
            if (dateTo == null)
                throw new ApiException(400, "Missing required parameter 'dateTo' when calling ReportsApi->GetParcelStatusesCurrentPeriod");

            var localVarPath = "/report/parcelStatuses/current/period";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DateTo", dateTo)); // query parameter
            if (idContract != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idContract", idContract)); // query parameter
            if (customerID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerID", customerID)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelStatusesCurrentPeriod", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncResponse)));
        }

        /// <summary>
        /// Get result of request of consignment info by period Get the result of request of the current status of the consignments - search by given period. / Předá výsledek požadavku na aktuální stav zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ParcelStatusCurrentListResponse</returns>
        public ParcelStatusCurrentListResponse GetParcelStatusesCurrentPeriodResult (string idTransaction)
        {
             ApiResponse<ParcelStatusCurrentListResponse> localVarResponse = GetParcelStatusesCurrentPeriodResultWithHttpInfo(idTransaction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get result of request of consignment info by period Get the result of request of the current status of the consignments - search by given period. / Předá výsledek požadavku na aktuální stav zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ApiResponse of ParcelStatusCurrentListResponse</returns>
        public ApiResponse< ParcelStatusCurrentListResponse > GetParcelStatusesCurrentPeriodResultWithHttpInfo (string idTransaction)
        {
            // verify the required parameter 'idTransaction' is set
            if (idTransaction == null)
                throw new ApiException(400, "Missing required parameter 'idTransaction' when calling ReportsApi->GetParcelStatusesCurrentPeriodResult");

            var localVarPath = "/result/parcelStatuses/current/period/{idTransaction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idTransaction != null) localVarPathParams.Add("idTransaction", this.Configuration.ApiClient.ParameterToString(idTransaction)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelStatusesCurrentPeriodResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelStatusCurrentListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ParcelStatusCurrentListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelStatusCurrentListResponse)));
        }

        /// <summary>
        /// Get result of request of consignment info by period Get the result of request of the current status of the consignments - search by given period. / Předá výsledek požadavku na aktuální stav zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ParcelStatusCurrentListResponse</returns>
        public async System.Threading.Tasks.Task<ParcelStatusCurrentListResponse> GetParcelStatusesCurrentPeriodResultAsync (string idTransaction)
        {
             ApiResponse<ParcelStatusCurrentListResponse> localVarResponse = await GetParcelStatusesCurrentPeriodResultAsyncWithHttpInfo(idTransaction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get result of request of consignment info by period Get the result of request of the current status of the consignments - search by given period. / Předá výsledek požadavku na aktuální stav zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ApiResponse (ParcelStatusCurrentListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ParcelStatusCurrentListResponse>> GetParcelStatusesCurrentPeriodResultAsyncWithHttpInfo (string idTransaction)
        {
            // verify the required parameter 'idTransaction' is set
            if (idTransaction == null)
                throw new ApiException(400, "Missing required parameter 'idTransaction' when calling ReportsApi->GetParcelStatusesCurrentPeriodResult");

            var localVarPath = "/result/parcelStatuses/current/period/{idTransaction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idTransaction != null) localVarPathParams.Add("idTransaction", this.Configuration.ApiClient.ParameterToString(idTransaction)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetParcelStatusesCurrentPeriodResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ParcelStatusCurrentListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ParcelStatusCurrentListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ParcelStatusCurrentListResponse)));
        }

        /// <summary>
        /// Get result of request of submitted consignments by period Get the result of requested info about quality of submitted consignments - search by given period. / Předá výsledek požadavku o informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>QualityResponse</returns>
        public QualityResponse GetQualityResult (string idTransaction)
        {
             ApiResponse<QualityResponse> localVarResponse = GetQualityResultWithHttpInfo(idTransaction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get result of request of submitted consignments by period Get the result of requested info about quality of submitted consignments - search by given period. / Předá výsledek požadavku o informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ApiResponse of QualityResponse</returns>
        public ApiResponse< QualityResponse > GetQualityResultWithHttpInfo (string idTransaction)
        {
            // verify the required parameter 'idTransaction' is set
            if (idTransaction == null)
                throw new ApiException(400, "Missing required parameter 'idTransaction' when calling ReportsApi->GetQualityResult");

            var localVarPath = "/result/quality/{idTransaction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idTransaction != null) localVarPathParams.Add("idTransaction", this.Configuration.ApiClient.ParameterToString(idTransaction)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQualityResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QualityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QualityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QualityResponse)));
        }

        /// <summary>
        /// Get result of request of submitted consignments by period Get the result of requested info about quality of submitted consignments - search by given period. / Předá výsledek požadavku o informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of QualityResponse</returns>
        public async System.Threading.Tasks.Task<QualityResponse> GetQualityResultAsync (string idTransaction)
        {
             ApiResponse<QualityResponse> localVarResponse = await GetQualityResultAsyncWithHttpInfo(idTransaction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get result of request of submitted consignments by period Get the result of requested info about quality of submitted consignments - search by given period. / Předá výsledek požadavku o informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ApiResponse (QualityResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<QualityResponse>> GetQualityResultAsyncWithHttpInfo (string idTransaction)
        {
            // verify the required parameter 'idTransaction' is set
            if (idTransaction == null)
                throw new ApiException(400, "Missing required parameter 'idTransaction' when calling ReportsApi->GetQualityResult");

            var localVarPath = "/result/quality/{idTransaction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idTransaction != null) localVarPathParams.Add("idTransaction", this.Configuration.ApiClient.ParameterToString(idTransaction)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetQualityResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<QualityResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (QualityResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(QualityResponse)));
        }

        /// <summary>
        /// Get info about quality of submitted consignments Get the info about quality of submitted consignments - search by given period. / Předá informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date FROM. / Datum OD.</param>
        /// <param name="dateTo">Date TO. / Datum DO.</param>
        /// <param name="catError">Error category. True - with errors / false - without errors. / Kategorie chyby. True - s chybami / false - bez chyb.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>AsyncResponse</returns>
        public AsyncResponse GetResultQuality (DateTime? dateFrom, DateTime? dateTo, bool? catError, string idContract = null, string customerID = null)
        {
             ApiResponse<AsyncResponse> localVarResponse = GetResultQualityWithHttpInfo(dateFrom, dateTo, catError, idContract, customerID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get info about quality of submitted consignments Get the info about quality of submitted consignments - search by given period. / Předá informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date FROM. / Datum OD.</param>
        /// <param name="dateTo">Date TO. / Datum DO.</param>
        /// <param name="catError">Error category. True - with errors / false - without errors. / Kategorie chyby. True - s chybami / false - bez chyb.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>ApiResponse of AsyncResponse</returns>
        public ApiResponse< AsyncResponse > GetResultQualityWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, bool? catError, string idContract = null, string customerID = null)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling ReportsApi->GetResultQuality");
            // verify the required parameter 'dateTo' is set
            if (dateTo == null)
                throw new ApiException(400, "Missing required parameter 'dateTo' when calling ReportsApi->GetResultQuality");
            // verify the required parameter 'catError' is set
            if (catError == null)
                throw new ApiException(400, "Missing required parameter 'catError' when calling ReportsApi->GetResultQuality");

            var localVarPath = "/report/quality/caterror/{catError}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catError != null) localVarPathParams.Add("catError", this.Configuration.ApiClient.ParameterToString(catError)); // path parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DateTo", dateTo)); // query parameter
            if (idContract != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idContract", idContract)); // query parameter
            if (customerID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerID", customerID)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResultQuality", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncResponse)));
        }

        /// <summary>
        /// Get info about quality of submitted consignments Get the info about quality of submitted consignments - search by given period. / Předá informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date FROM. / Datum OD.</param>
        /// <param name="dateTo">Date TO. / Datum DO.</param>
        /// <param name="catError">Error category. True - with errors / false - without errors. / Kategorie chyby. True - s chybami / false - bez chyb.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>Task of AsyncResponse</returns>
        public async System.Threading.Tasks.Task<AsyncResponse> GetResultQualityAsync (DateTime? dateFrom, DateTime? dateTo, bool? catError, string idContract = null, string customerID = null)
        {
             ApiResponse<AsyncResponse> localVarResponse = await GetResultQualityAsyncWithHttpInfo(dateFrom, dateTo, catError, idContract, customerID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get info about quality of submitted consignments Get the info about quality of submitted consignments - search by given period. / Předá informace o kvalitě podaných zásilek - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dateFrom">Date FROM. / Datum OD.</param>
        /// <param name="dateTo">Date TO. / Datum DO.</param>
        /// <param name="catError">Error category. True - with errors / false - without errors. / Kategorie chyby. True - s chybami / false - bez chyb.</param>
        /// <param name="idContract">The source (partner identification) of the requested data - by ID CCK of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle ID CČK složky podavatele. (optional)</param>
        /// <param name="customerID">The source (partner identification) of the requested data - by Customer ID of submitter. / Zdroj (identifikace partnera) požadovaných dat. - dle technologického čísla podavatele. (optional)</param>
        /// <returns>Task of ApiResponse (AsyncResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<AsyncResponse>> GetResultQualityAsyncWithHttpInfo (DateTime? dateFrom, DateTime? dateTo, bool? catError, string idContract = null, string customerID = null)
        {
            // verify the required parameter 'dateFrom' is set
            if (dateFrom == null)
                throw new ApiException(400, "Missing required parameter 'dateFrom' when calling ReportsApi->GetResultQuality");
            // verify the required parameter 'dateTo' is set
            if (dateTo == null)
                throw new ApiException(400, "Missing required parameter 'dateTo' when calling ReportsApi->GetResultQuality");
            // verify the required parameter 'catError' is set
            if (catError == null)
                throw new ApiException(400, "Missing required parameter 'catError' when calling ReportsApi->GetResultQuality");

            var localVarPath = "/report/quality/caterror/{catError}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (catError != null) localVarPathParams.Add("catError", this.Configuration.ApiClient.ParameterToString(catError)); // path parameter
            if (dateFrom != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DateFrom", dateFrom)); // query parameter
            if (dateTo != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "DateTo", dateTo)); // query parameter
            if (idContract != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "idContract", idContract)); // query parameter
            if (customerID != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "customerID", customerID)); // query parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetResultQuality", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<AsyncResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (AsyncResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(AsyncResponse)));
        }

        /// <summary>
        /// Get result of request of submitted consignments by period Get the result of requested info about submitted consignments - search by given period. / Předá výsledek požadavku o informace o podaných zásilkách - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>SubmittedConsignmentsResponse</returns>
        public SubmittedConsignmentsResponse GetSubmittedConsignmentResult (string idTransaction)
        {
             ApiResponse<SubmittedConsignmentsResponse> localVarResponse = GetSubmittedConsignmentResultWithHttpInfo(idTransaction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get result of request of submitted consignments by period Get the result of requested info about submitted consignments - search by given period. / Předá výsledek požadavku o informace o podaných zásilkách - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>ApiResponse of SubmittedConsignmentsResponse</returns>
        public ApiResponse< SubmittedConsignmentsResponse > GetSubmittedConsignmentResultWithHttpInfo (string idTransaction)
        {
            // verify the required parameter 'idTransaction' is set
            if (idTransaction == null)
                throw new ApiException(400, "Missing required parameter 'idTransaction' when calling ReportsApi->GetSubmittedConsignmentResult");

            var localVarPath = "/result/submittedConsignments/{idTransaction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idTransaction != null) localVarPathParams.Add("idTransaction", this.Configuration.ApiClient.ParameterToString(idTransaction)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmittedConsignmentResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmittedConsignmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmittedConsignmentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmittedConsignmentsResponse)));
        }

        /// <summary>
        /// Get result of request of submitted consignments by period Get the result of requested info about submitted consignments - search by given period. / Předá výsledek požadavku o informace o podaných zásilkách - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of SubmittedConsignmentsResponse</returns>
        public async System.Threading.Tasks.Task<SubmittedConsignmentsResponse> GetSubmittedConsignmentResultAsync (string idTransaction)
        {
             ApiResponse<SubmittedConsignmentsResponse> localVarResponse = await GetSubmittedConsignmentResultAsyncWithHttpInfo(idTransaction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get result of request of submitted consignments by period Get the result of requested info about submitted consignments - search by given period. / Předá výsledek požadavku o informace o podaných zásilkách - vyhledání dle daného období.
        /// </summary>
        /// <exception cref="IO.Swagger.CzechPost.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="idTransaction">Transaction ID assigned by the B2B module (asynchronous call). / ID transakce přidělené modulem B2B (asynchronní volání).</param>
        /// <returns>Task of ApiResponse (SubmittedConsignmentsResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SubmittedConsignmentsResponse>> GetSubmittedConsignmentResultAsyncWithHttpInfo (string idTransaction)
        {
            // verify the required parameter 'idTransaction' is set
            if (idTransaction == null)
                throw new ApiException(400, "Missing required parameter 'idTransaction' when calling ReportsApi->GetSubmittedConsignmentResult");

            var localVarPath = "/result/submittedConsignments/{idTransaction}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (idTransaction != null) localVarPathParams.Add("idTransaction", this.Configuration.ApiClient.ParameterToString(idTransaction)); // path parameter
            // authentication (Api-Token) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Api-Token")))
            {
                localVarHeaderParams["Api-Token"] = this.Configuration.GetApiKeyWithPrefix("Api-Token");
            }
            // authentication (Authorization-Timestamp) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp")))
            {
                localVarHeaderParams["Authorization-Timestamp"] = this.Configuration.GetApiKeyWithPrefix("Authorization-Timestamp");
            }
            // authentication (HMAC_SHA256_Auth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSubmittedConsignmentResult", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SubmittedConsignmentsResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SubmittedConsignmentsResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SubmittedConsignmentsResponse)));
        }

    }
}
